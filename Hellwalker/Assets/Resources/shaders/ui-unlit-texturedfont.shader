Shader "UI/Unlit/Textured Font" {
	Properties {
		[PerRendererData] _MainTex ("Sprite Texture", 2D) = "white" {}
		_Color ("Main Color", Vector) = (1,1,1,1)
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_Strength ("Detail Strength", Range(0, 1)) = 0.2
		_StencilComp ("Stencil Comparison", Float) = 8
		_Stencil ("Stencil ID", Float) = 0
		_StencilOp ("Stencil Operation", Float) = 0
		_StencilWriteMask ("Stencil Write Mask", Float) = 255
		_StencilReadMask ("Stencil Read Mask", Float) = 255
		_ColorMask ("Color Mask", Float) = 15
		[Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip ("Use Alpha Clip", Float) = 0
	}
	SubShader {
		LOD 100
		Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			LOD 100
			Tags { "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask 0 -1
			ZClip Off
			ZWrite Off
			Cull Off
			Stencil {
				ReadMask 0
				WriteMask 0
				Comp Disabled
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			GpuProgramID 244
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _DetailTex_ST;
					//   float4 _DetailTex_TexelSize;
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_ObjectToWorld  c0       4
					//   unity_MatrixVP       c4       4
					//   _MainTex_ST          c8       1
					//   _DetailTex_ST        c9       1
					//   _DetailTex_TexelSize c10      1
					//   _Color               c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_color o3
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o1.xy, v1, c8, c8.zwzw
					    mul r0.xy, c10, v2
					    mad o2.xy, r0, c9, c9.zwzw
					    mul o3, c11, v3
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						vec4 _DetailTex_ST;
						vec4 _DetailTex_TexelSize;
						vec4 _Color;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xy = in_TEXCOORD1.xy * _DetailTex_TexelSize.xy;
					    vs_TEXCOORD1.xy = u_xlat0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_COLOR0 = in_COLOR0 * _Color;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _DetailTex_ST;
					//   float4 _DetailTex_TexelSize;
					//   float4 _MainTex_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_ObjectToWorld  c0       4
					//   unity_MatrixVP       c4       4
					//   _MainTex_ST          c8       1
					//   _DetailTex_ST        c9       1
					//   _DetailTex_TexelSize c10      1
					//   _Color               c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord1 v2
					    dcl_color v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_color o3
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mad o1.xy, v1, c8, c8.zwzw
					    mul r0.xy, c10, v2
					    mad o2.xy, r0, c9, c9.zwzw
					    mul o3, c11, v3
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						vec4 _DetailTex_ST;
						vec4 _DetailTex_TexelSize;
						vec4 _Color;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xy = in_TEXCOORD1.xy * _DetailTex_TexelSize.xy;
					    vs_TEXCOORD1.xy = u_xlat0.xy * _DetailTex_ST.xy + _DetailTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_COLOR0 = in_COLOR0 * _Color;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler2D _DetailTex;
					//   sampler2D _MainTex;
					//   float _Strength;
					//   float4 _TextureSampleAdd;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Color            c0       1
					//   _Strength         c1       1
					//   _TextureSampleAdd c2       1
					//   _MainTex          s0       1
					//   _DetailTex        s1       1
					//
					
					    ps_3_0
					    dcl_texcoord v0.xy
					    dcl_color v1
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    mul_pp r0.w, r0.w, c1.x
					    texld r1, v0, s0
					    add r2, r1, c2
					    mul_pp r2, r2, v1
					    mad_pp r0.xyz, r2, r0, -r2
					    mad_pp r2.xyz, r0.w, r0, r2
					    mul_pp r0, r2, c0
					    mul_pp oC0.w, r1.w, r0.w
					    mov_pp oC0.xyz, r0
					
					// approximately 10 instruction slots used (2 texture, 8 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _Color;
						float _Strength;
						vec4 _TextureSampleAdd;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DetailTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat10_0 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat10_0.w * _Strength;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat10_1 + _TextureSampleAdd;
					    u_xlat2 = u_xlat2 * vs_COLOR0;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat10_0.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * _Color;
					    SV_Target0.w = u_xlat10_1.w * u_xlat0.w;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler2D _DetailTex;
					//   sampler2D _MainTex;
					//   float _Strength;
					//   float4 _TextureSampleAdd;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Color            c0       1
					//   _Strength         c1       1
					//   _TextureSampleAdd c2       1
					//   _MainTex          s0       1
					//   _DetailTex        s1       1
					//
					
					    ps_3_0
					    def c3, -0.00100000005, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_color v1
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s1
					    mul_pp r0.w, r0.w, c1.x
					    texld r1, v0, s0
					    add r2, r1, c2
					    mul_pp r2, r2, v1
					    mad_pp r0.xyz, r2, r0, -r2
					    mad_pp r2.xyz, r0.w, r0, r2
					    mul_pp r0, r2, c0
					    mad_pp r2, r0.w, r1.w, c3.x
					    mul_pp r0.w, r1.w, r0.w
					    mov_pp oC0, r0
					    texkill r2
					
					// approximately 12 instruction slots used (2 texture, 10 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_UI_ALPHACLIP" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _Color;
						float _Strength;
						vec4 _TextureSampleAdd;
						vec4 unused_0_4[3];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DetailTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					float u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat10_0 = texture(_DetailTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat10_0.w * _Strength;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat10_1 + _TextureSampleAdd;
					    u_xlat2 = u_xlat2 * vs_COLOR0;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat10_0.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0 = u_xlat2 * _Color;
					    u_xlat1 = u_xlat0.w * u_xlat10_1.w + -0.00100000005;
					    u_xlat0.w = u_xlat10_1.w * u_xlat0.w;
					    SV_Target0 = u_xlat0;
					    u_xlatb0 = u_xlat1<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    return;
					}"
				}
			}
		}
	}
}
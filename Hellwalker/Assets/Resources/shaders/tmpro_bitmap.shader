Shader "TMPro/Bitmap" {
	Properties {
		_MainTex ("Font Atlas", 2D) = "white" {}
		_FaceTex ("Font Texture", 2D) = "white" {}
		_FaceColor ("Text Color", Vector) = (1,1,1,1)
		_VertexOffsetX ("Vertex OffsetX", Float) = 0
		_VertexOffsetY ("Vertex OffsetY", Float) = 0
		_MaskSoftnessX ("Mask SoftnessX", Float) = 0
		_MaskSoftnessY ("Mask SoftnessY", Float) = 0
		_StencilComp ("Stencil Comparison", Float) = 8
		_Stencil ("Stencil ID", Float) = 0
		_StencilOp ("Stencil Operation", Float) = 0
		_StencilWriteMask ("Stencil Write Mask", Float) = 255
		_StencilReadMask ("Stencil Read Mask", Float) = 255
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ZClip Off
			ZWrite Off
			Cull Off
			Stencil {
				ReadMask 0
				WriteMask 0
				Comp Disabled
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			Fog {
				Mode Off
			}
			GpuProgramID 4226
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _FaceColor;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ObjectToWorld       c0       4
					//   unity_MatrixVP            c4       4
					//   glstate_matrix_projection c8       2
					//   _ScreenParams             c10      1
					//   _FaceColor                c11      1
					//   _VertexOffsetX            c12      1
					//   _VertexOffsetY            c13      1
					//
					
					    vs_3_0
					    def c14, 4, 0, 0, 0
					    def c15, 1, 0, 0.5, 0.0009765625
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3.xy
					    dcl_texcoord2 o4
					    mad r0.zw, v0.z, c15.xyxy, c15.xyyx
					    add r0.x, c12.x, v0.x
					    add r0.y, c13.x, v0.y
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    mov o4.xy, r0
					    dp4 r3.z, c6, r1
					    dp4 r0.x, c4, r1
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c7, r1
					    rcp r0.w, r0.z
					    mul r0.xy, r0.w, r0
					    mov r1.z, c15.z
					    mul r1.xy, r1.z, c10
					    mad r0.xy, r0, r1, c15.z
					    frc r1.zw, r0.xyxy
					    add r0.xy, r0, -r1.zwzw
					    rcp r2.x, r1.x
					    rcp r2.y, r1.y
					    mul r0.xy, r0, r2
					    mul r3.xy, r0.z, r0
					    mul o1, c11, v1
					    frc r0.x, v3.x
					    add r0.y, -r0.x, v3.x
					    mul o3.y, r0.x, c14.x
					    mul o3.x, r0.y, c15.w
					    mov r0.xy, c10
					    mul r0.x, r0.x, c8.x
					    rcp r1.x, r0_abs.x
					    mul r0.x, r0.y, c9.y
					    rcp r1.y, r0_abs.x
					    mul r0.xy, r0.z, r1
					    mov r3.w, r0.z
					    rcp r0.z, r0.x
					    rcp r0.w, r0.y
					    mul o4.zw, r0, c15.z
					    mov o2.xy, v2
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 41 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat5;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    vs_TEXCOORD2.xy = u_xlat0.xy;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);
					    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;
					    u_xlat0.xy = roundEven(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;
					    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;
					    gl_Position.zw = u_xlat0.zw;
					    vs_COLOR0 = in_COLOR0 * _FaceColor;
					    u_xlat0.x = floor(in_TEXCOORD1.x);
					    vs_TEXCOORD1.x = u_xlat0.x * 0.0009765625;
					    u_xlat0.x = fract(in_TEXCOORD1.x);
					    vs_TEXCOORD1.y = u_xlat0.x * 4.0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat5.x = _ScreenParams.x * glstate_matrix_projection[0].x;
					    u_xlat5.y = _ScreenParams.y * glstate_matrix_projection[1].y;
					    u_xlat0.xy = u_xlat0.ww / abs(u_xlat5.xy);
					    vs_TEXCOORD2.zw = vec2(0.5, 0.5) / u_xlat0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   sampler2D _FaceTex;
					//   sampler2D _MainTex;
					//   bool _UseClipRect;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _UseClipRect c0       1
					//   _ClipRect    c1       1
					//   _MainTex     s0       1
					//   _FaceTex     s1       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0, 0
					    dcl_color v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.xy
					    dcl_texcoord2 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xy, c1.zwzw, -v3
					    cmp r0.xy, r0, c2.x, c2.y
					    add r0.zw, -c1.xyxy, v3.xyxy
					    cmp r0.xy, r0.zwzw, r0, c2.y
					    mul r0.x, r0.y, r0.x
					    texld r1, v1, s0
					    texld r2, v2, s1
					    mul_pp r2, r2, v0
					    mul_pp r2.w, r1.w, r2.w
					    mul_pp r0, r0.x, r2
					    cmp_pp oC0, -c0.x, r2, r0
					
					// approximately 11 instruction slots used (2 texture, 9 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						int _UseClipRect;
						vec4 unused_0_2[2];
						vec4 _ClipRect;
						vec4 unused_0_4;
					};
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					void main()
					{
					    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD2.xyxx, _ClipRect.xyxx).xy;
					    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD2.xxxy).zw;
					    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
					    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat10_2 = texture(_FaceTex, vs_TEXCOORD1.xy);
					    u_xlat2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat2.w = u_xlat10_1.w * u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx * u_xlat2;
					    SV_Target0 = (_UseClipRect != 0) ? u_xlat0 : u_xlat2;
					    return;
					}"
				}
			}
		}
	}
}
Shader "TMPro/Mobile/Distance Field" {
	Properties {
		_FaceColor ("Face Color", Vector) = (1,1,1,1)
		_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
		_OutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
		_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
		_UnderlayColor ("Border Color", Vector) = (0,0,0,0.5)
		_UnderlayOffsetX ("Border OffsetX", Range(-1, 1)) = 0
		_UnderlayOffsetY ("Border OffsetY", Range(-1, 1)) = 0
		_UnderlayDilate ("Border Dilate", Range(-1, 1)) = 0
		_UnderlaySoftness ("Border Softness", Range(0, 1)) = 0
		_WeightNormal ("Weight Normal", Float) = 0
		_WeightBold ("Weight Bold", Float) = 0.5
		_ShaderFlags ("Flags", Float) = 0
		_ScaleRatioA ("Scale RatioA", Float) = 1
		_ScaleRatioB ("Scale RatioB", Float) = 1
		_ScaleRatioC ("Scale RatioC", Float) = 1
		_MainTex ("Font Atlas", 2D) = "white" {}
		_TextureWidth ("Texture Width", Float) = 512
		_TextureHeight ("Texture Height", Float) = 512
		_GradientScale ("Gradient Scale", Float) = 5
		_ScaleX ("Scale X", Float) = 1
		_ScaleY ("Scale Y", Float) = 1
		_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
		_VertexOffsetX ("Vertex OffsetX", Float) = 0
		_VertexOffsetY ("Vertex OffsetY", Float) = 0
		_MaskTex ("Mask Texture", 2D) = "white" {}
		_MaskCoord ("Mask Coordinates", Vector) = (0,0,100000,100000)
		_MaskSoftnessX ("Mask SoftnessX", Float) = 0
		_MaskSoftnessY ("Mask SoftnessY", Float) = 0
		_StencilComp ("Stencil Comparison", Float) = 8
		_Stencil ("Stencil ID", Float) = 0
		_StencilOp ("Stencil Operation", Float) = 0
		_StencilWriteMask ("Stencil Write Mask", Float) = 255
		_StencilReadMask ("Stencil Read Mask", Float) = 255
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
			ZClip Off
			ZWrite Off
			Cull Off
			Stencil {
				ReadMask 0
				WriteMask 0
				Comp Disabled
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			Fog {
				Mode Off
			}
			GpuProgramID 28358
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _FaceColor;
					//   float _FaceDilate;
					//   float _GradientScale;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ObjectToWorld       c0       4
					//   glstate_matrix_projection c4       4
					//   unity_MatrixVP            c8       4
					//   unity_WorldToObject       c12      3
					//   _WorldSpaceCameraPos      c15      1
					//   _ScreenParams             c16      1
					//   _FaceColor                c17      1
					//   _FaceDilate               c18      1
					//   _OutlineSoftness          c19      1
					//   _OutlineColor             c20      1
					//   _OutlineWidth             c21      1
					//   _WeightNormal             c22      1
					//   _WeightBold               c23      1
					//   _ScaleRatioA              c24      1
					//   _VertexOffsetX            c25      1
					//   _VertexOffsetY            c26      1
					//   _GradientScale            c27      1
					//   _ScaleX                   c28      1
					//   _ScaleY                   c29      1
					//   _PerspectiveFilter        c30      1
					//
					
					    vs_3_0
					    def c31, 0, 1, 1.5, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_color1 o2
					    dcl_texcoord o3.xy
					    dcl_texcoord1 o4
					    dcl_texcoord2 o5
					    add r0.x, c25.x, v0.x
					    add r0.y, c26.x, v0.y
					    mad r0.zw, v0.z, c31.xyyx, c31.xyxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c8, r1
					    dp4 r4.y, c9, r1
					    dp4 r4.z, c10, r1
					    dp4 r1.x, c11, r1
					    mov r0.w, v0.w
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mov o5.xy, r0
					    add r0.xyz, -r2, c15
					    nrm r2.xyz, r0
					    mul r0.xyz, c13, v1.y
					    mad r0.xyz, v1.x, c12, r0
					    mad r0.xyz, v1.z, c14, r0
					    nrm r3.xyz, r0
					    dp3 r0.x, r3, r2
					    mov r2.xy, c16
					    mul r0.yz, r2.xxyw, c4.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c28.x
					    rcp r3.x, r0.y
					    mul r0.yz, r2.xxyw, c5.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c29.x
					    rcp r3.y, r0.y
					    mul r0.yz, r1.x, r3.xxyw
					    mov r4.w, r1.x
					    mul r1.xy, r0.yzzw, r0.yzzw
					    add r0.w, r1.y, r1.x
					    rsq r0.w, r0.w
					    mul r1.x, c27.x, v4_abs.y
					    mul r0.w, r0.w, r1.x
					    mul r1.x, r0.w, c31.z
					    mov r1.y, c31.y
					    add r1.y, r1.y, -c30.x
					    mul r1.y, r1.y, r1.x
					    mad r1.z, r0.w, c31.z, -r1.y
					    mad r0.x, r0_abs.x, r1.z, r1.y
					    mad r0.x, r0.w, -c31.z, r0.x
					    abs r0.w, c7.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.x, r0.w, r0.x, r1.x
					    mov r1.x, c24.x
					    mul r0.w, r1.x, c19.x
					    mad r0.w, r0.w, r0.x, c31.y
					    rcp r0.w, r0.w
					    mul r0.x, r0.w, r0.x
					    mul r1.y, r1.x, c21.x
					    mul r1.y, r1.y, c31.w
					    mul r1.z, r0.x, r1.y
					    add r1.z, r1.z, r1.z
					    min r1.z, r1.z, c31.y
					    rsq r1.z, r1.z
					    rcp r1.z, r1.z
					    mul r2.w, c20.w, v2.w
					    mul r2.xyz, r2.w, c20
					    mul r3, c17, v2
					    mul r3.xyz, r3.w, r3
					    add r2, r2, -r3
					    mad o2, r1.z, r2, r3
					    mov o1, r3
					    sge r1.z, c31.x, v4.y
					    mov r2.x, c22.x
					    add r1.w, -r2.x, c23.x
					    mad r1.z, r1.z, r1.w, c22.x
					    mul r1.x, r1.x, c18.x
					    mul r1.x, r1.x, c31.w
					    rcp r1.w, c27.x
					    mad r1.x, r1.z, r1.w, r1.x
					    add r1.x, -r1.x, c31.w
					    mad r0.w, r1.x, r0.x, -c31.w
					    mad o4.y, r1.y, -r0.x, r0.w
					    mad o4.z, r1.y, r0.x, r0.w
					    mov o4.xw, r0
					    rcp r1.z, r0.y
					    rcp r1.w, r0.z
					    mul o5.zw, r1, c31.w
					    mov o3.xy, v3
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 91 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[3];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_17[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    vs_TEXCOORD2.xy = u_xlat0.xy;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2 = in_COLOR0 * _FaceColor;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    vs_COLOR0 = u_xlat2;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = abs(u_xlat4.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat4.xy = u_xlat1.ww / u_xlat4.xy;
					    u_xlat12 = dot(u_xlat4.xy, u_xlat4.xy);
					    vs_TEXCOORD2.zw = vec2(0.5, 0.5) / u_xlat4.xy;
					    u_xlat4.x = inversesqrt(u_xlat12);
					    u_xlat8 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat8 = u_xlat4.x * 1.5;
					    u_xlat12 = (-_PerspectiveFilter) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat8;
					    u_xlat4.x = u_xlat4.x * 1.5 + (-u_xlat12);
					    u_xlat0.x = abs(u_xlat0.x) * u_xlat4.x + u_xlat12;
					    u_xlatb4 = glstate_matrix_projection[3].w==0.0;
					    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat8;
					    u_xlat4.xy = vec2(_FaceDilate, _OutlineSoftness) * vec2(vec2(_ScaleRatioA, _ScaleRatioA));
					    u_xlat8 = u_xlat4.y * u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat8 = _OutlineWidth * _ScaleRatioA;
					    u_xlat8 = u_xlat8 * 0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat8;
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat3.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat3.xyz = u_xlat3.www * _OutlineColor.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    vs_COLOR1 = u_xlat1.xxxx * u_xlat3 + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb1 = 0.0>=in_TEXCOORD1.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + _WeightNormal;
					    u_xlat1.x = u_xlat1.x / _GradientScale;
					    u_xlat4.x = u_xlat4.x * 0.5 + u_xlat1.x;
					    u_xlat4.x = (-u_xlat4.x) + 0.5;
					    u_xlat0.w = u_xlat4.x * u_xlat0.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat8) * u_xlat0.x + u_xlat0.w;
					    vs_TEXCOORD1.z = u_xlat8 * u_xlat0.x + u_xlat0.w;
					    vs_TEXCOORD1.xw = u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _FaceColor;
					//   float _FaceDilate;
					//   float _GradientScale;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleRatioC;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _UnderlayColor;
					//   float _UnderlayDilate;
					//   float _UnderlayOffsetX;
					//   float _UnderlayOffsetY;
					//   float _UnderlaySoftness;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ObjectToWorld       c0       4
					//   glstate_matrix_projection c4       4
					//   unity_MatrixVP            c8       4
					//   unity_WorldToObject       c12      3
					//   _WorldSpaceCameraPos      c15      1
					//   _ScreenParams             c16      1
					//   _FaceColor                c17      1
					//   _FaceDilate               c18      1
					//   _OutlineSoftness          c19      1
					//   _OutlineColor             c20      1
					//   _OutlineWidth             c21      1
					//   _UnderlayColor            c22      1
					//   _UnderlayOffsetX          c23      1
					//   _UnderlayOffsetY          c24      1
					//   _UnderlayDilate           c25      1
					//   _UnderlaySoftness         c26      1
					//   _WeightNormal             c27      1
					//   _WeightBold               c28      1
					//   _ScaleRatioA              c29      1
					//   _ScaleRatioC              c30      1
					//   _VertexOffsetX            c31      1
					//   _VertexOffsetY            c32      1
					//   _TextureWidth             c33      1
					//   _TextureHeight            c34      1
					//   _GradientScale            c35      1
					//   _ScaleX                   c36      1
					//   _ScaleY                   c37      1
					//   _PerspectiveFilter        c38      1
					//
					
					    vs_3_0
					    def c39, 0, 1, 1.5, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_color1 o2
					    dcl_texcoord o3.xy
					    dcl_texcoord1 o4
					    dcl_texcoord2 o5
					    dcl_texcoord3 o6.xy
					    dcl_texcoord4 o7
					    dcl_texcoord5 o8.xy
					    add r0.x, c31.x, v0.x
					    add r0.y, c32.x, v0.y
					    mad r0.zw, v0.z, c39.xyyx, c39.xyxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r5.x, c8, r1
					    dp4 r5.y, c9, r1
					    dp4 r5.z, c10, r1
					    dp4 r1.x, c11, r1
					    mov r0.w, v0.w
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mov o5.xy, r0
					    add r0.xyz, -r2, c15
					    nrm r2.xyz, r0
					    mul r0.xyz, c13, v1.y
					    mad r0.xyz, v1.x, c12, r0
					    mad r0.xyz, v1.z, c14, r0
					    nrm r3.xyz, r0
					    dp3 r0.x, r3, r2
					    mov r2.xy, c16
					    mul r0.yz, r2.xxyw, c4.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c36.x
					    rcp r3.x, r0.y
					    mul r0.yz, r2.xxyw, c5.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c37.x
					    rcp r3.y, r0.y
					    mul r0.yz, r1.x, r3.xxyw
					    mov r5.w, r1.x
					    mul r1.xy, r0.yzzw, r0.yzzw
					    add r0.w, r1.y, r1.x
					    rsq r0.w, r0.w
					    mul r1.x, c35.x, v4_abs.y
					    mul r0.w, r0.w, r1.x
					    mul r1.x, r0.w, c39.z
					    mov r1.y, c39.y
					    add r1.y, r1.y, -c38.x
					    mul r1.y, r1.y, r1.x
					    mad r1.z, r0.w, c39.z, -r1.y
					    mad r0.x, r0_abs.x, r1.z, r1.y
					    mad r0.x, r0.w, -c39.z, r0.x
					    abs r0.w, c7.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.x, r0.w, r0.x, r1.x
					    mov r1.x, c29.x
					    mul r0.w, r1.x, c19.x
					    mad r0.w, r0.w, r0.x, c39.y
					    rcp r0.w, r0.w
					    mul r2.x, r0.w, r0.x
					    mul r0.w, r1.x, c21.x
					    mul r0.w, r0.w, c39.w
					    mul r1.y, r2.x, r0.w
					    add r1.y, r1.y, r1.y
					    min r1.y, r1.y, c39.y
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    mul r3.w, c20.w, v2.w
					    mul r3.xyz, r3.w, c20
					    mul r4, c17, v2
					    mul r4.xyz, r4.w, r4
					    add r3, r3, -r4
					    mad o2, r1.y, r3, r4
					    mov o1, r4
					    mul r1.y, c22.w, v2.w
					    mul o7.xyz, r1.y, c22
					    mov o7.w, r1.y
					    mov r3.x, c30.x
					    mul r1.y, r3.x, c26.x
					    mad r1.y, r1.y, r0.x, c39.y
					    rcp r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    sge r1.y, c39.x, v4.y
					    mov r4.x, c27.x
					    add r1.z, -r4.x, c28.x
					    mad r1.y, r1.y, r1.z, c27.x
					    mul r1.x, r1.x, c18.x
					    mul r1.x, r1.x, c39.w
					    rcp r1.z, c35.x
					    mad r1.x, r1.y, r1.z, r1.x
					    add r1.y, -r1.x, c39.w
					    lrp r2.y, r0.x, -r1.x, -c39.w
					    mad r2.w, r1.y, r2.x, -c39.w
					    mul r1.x, r3.x, c25.x
					    mul r1.x, r1.x, c39.w
					    mad o8.y, r1.x, -r0.x, r2.y
					    mov o8.x, r0.x
					    mad o4.y, r0.w, -r2.x, r2.w
					    mad o4.z, r0.w, r2.x, r2.w
					    mov o4.xw, r2
					    rcp r1.z, r0.y
					    rcp r1.w, r0.z
					    mul o5.zw, r1, c39.w
					    mul r0.x, r3.x, c23.x
					    mul r0.x, -r0.x, c35.x
					    rcp r0.y, c33.x
					    mul r0.x, r0.y, r0.x
					    mul r0.z, r3.x, c24.x
					    mul r0.z, -r0.z, c35.x
					    rcp r0.w, c34.x
					    mul r0.y, r0.w, r0.z
					    add o6.xy, r0, v3
					    mov o3.xy, v3
					    mad o0.xy, r5.w, c255, r5
					    mov o0.zw, r5
					
					// approximately 113 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[11];
						vec4 _UnderlayColor;
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_12[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_19[2];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_26[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    vs_TEXCOORD2.xy = u_xlat0.xy;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2 = in_COLOR0 * _FaceColor;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    vs_COLOR0 = u_xlat2;
					    u_xlat3.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat3.xyz = u_xlat3.www * _OutlineColor.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = abs(u_xlat4.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat4.xy = u_xlat1.ww / u_xlat4.xy;
					    u_xlat12 = dot(u_xlat4.xy, u_xlat4.xy);
					    vs_TEXCOORD2.zw = vec2(0.5, 0.5) / u_xlat4.xy;
					    u_xlat4.x = inversesqrt(u_xlat12);
					    u_xlat8 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat8 = u_xlat4.x * 1.5;
					    u_xlat12 = (-_PerspectiveFilter) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat8;
					    u_xlat4.x = u_xlat4.x * 1.5 + (-u_xlat12);
					    u_xlat0.x = abs(u_xlat0.x) * u_xlat4.x + u_xlat12;
					    u_xlatb4 = glstate_matrix_projection[3].w==0.0;
					    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat8;
					    u_xlat4.xy = vec2(_FaceDilate, _OutlineSoftness) * vec2(vec2(_ScaleRatioA, _ScaleRatioA));
					    u_xlat8 = u_xlat4.y * u_xlat0.x + 1.0;
					    u_xlat1.x = u_xlat0.x / u_xlat8;
					    u_xlat8 = _OutlineWidth * _ScaleRatioA;
					    u_xlat8 = u_xlat8 * 0.5;
					    u_xlat12 = u_xlat1.x * u_xlat8;
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = sqrt(u_xlat12);
					    vs_COLOR1 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat5.xy = (-u_xlat2.zw) * vec2(_GradientScale);
					    u_xlat5.xy = u_xlat5.xy / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat5.xy + in_TEXCOORD0.xy;
					    u_xlatb12 = 0.0>=in_TEXCOORD1.y;
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat12 = u_xlat12 * u_xlat5.x + _WeightNormal;
					    u_xlat12 = u_xlat12 / _GradientScale;
					    u_xlat4.x = u_xlat4.x * 0.5 + u_xlat12;
					    u_xlat4.x = (-u_xlat4.x) + 0.5;
					    u_xlat1.w = u_xlat4.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat8) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat8 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    u_xlat8 = in_COLOR0.w * _UnderlayColor.w;
					    vs_TEXCOORD4.xyz = vec3(u_xlat8) * _UnderlayColor.xyz;
					    vs_TEXCOORD4.w = u_xlat8;
					    u_xlat8 = u_xlat2.x * u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat8 = u_xlat2.y * 0.5;
					    u_xlat4.x = u_xlat4.x * u_xlat0.x + -0.5;
					    vs_TEXCOORD5.y = (-u_xlat8) * u_xlat0.x + u_xlat4.x;
					    vs_TEXCOORD5.x = u_xlat0.x;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "OUTLINE_ON" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _FaceColor;
					//   float _FaceDilate;
					//   float _GradientScale;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ObjectToWorld       c0       4
					//   glstate_matrix_projection c4       4
					//   unity_MatrixVP            c8       4
					//   unity_WorldToObject       c12      3
					//   _WorldSpaceCameraPos      c15      1
					//   _ScreenParams             c16      1
					//   _FaceColor                c17      1
					//   _FaceDilate               c18      1
					//   _OutlineSoftness          c19      1
					//   _OutlineColor             c20      1
					//   _OutlineWidth             c21      1
					//   _WeightNormal             c22      1
					//   _WeightBold               c23      1
					//   _ScaleRatioA              c24      1
					//   _VertexOffsetX            c25      1
					//   _VertexOffsetY            c26      1
					//   _GradientScale            c27      1
					//   _ScaleX                   c28      1
					//   _ScaleY                   c29      1
					//   _PerspectiveFilter        c30      1
					//
					
					    vs_3_0
					    def c31, 0, 1, 1.5, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_color1 o2
					    dcl_texcoord o3.xy
					    dcl_texcoord1 o4
					    dcl_texcoord2 o5
					    add r0.x, c25.x, v0.x
					    add r0.y, c26.x, v0.y
					    mad r0.zw, v0.z, c31.xyyx, c31.xyxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c8, r1
					    dp4 r4.y, c9, r1
					    dp4 r4.z, c10, r1
					    dp4 r1.x, c11, r1
					    mov r0.w, v0.w
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mov o5.xy, r0
					    add r0.xyz, -r2, c15
					    nrm r2.xyz, r0
					    mul r0.xyz, c13, v1.y
					    mad r0.xyz, v1.x, c12, r0
					    mad r0.xyz, v1.z, c14, r0
					    nrm r3.xyz, r0
					    dp3 r0.x, r3, r2
					    mov r2.xy, c16
					    mul r0.yz, r2.xxyw, c4.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c28.x
					    rcp r3.x, r0.y
					    mul r0.yz, r2.xxyw, c5.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c29.x
					    rcp r3.y, r0.y
					    mul r0.yz, r1.x, r3.xxyw
					    mov r4.w, r1.x
					    mul r1.xy, r0.yzzw, r0.yzzw
					    add r0.w, r1.y, r1.x
					    rsq r0.w, r0.w
					    mul r1.x, c27.x, v4_abs.y
					    mul r0.w, r0.w, r1.x
					    mul r1.x, r0.w, c31.z
					    mov r1.y, c31.y
					    add r1.y, r1.y, -c30.x
					    mul r1.y, r1.y, r1.x
					    mad r1.z, r0.w, c31.z, -r1.y
					    mad r0.x, r0_abs.x, r1.z, r1.y
					    mad r0.x, r0.w, -c31.z, r0.x
					    abs r0.w, c7.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.x, r0.w, r0.x, r1.x
					    mov r1.x, c24.x
					    mul r0.w, r1.x, c19.x
					    mad r0.w, r0.w, r0.x, c31.y
					    rcp r0.w, r0.w
					    mul r0.x, r0.w, r0.x
					    mul r1.y, r1.x, c21.x
					    mul r1.y, r1.y, c31.w
					    mul r1.z, r0.x, r1.y
					    add r1.z, r1.z, r1.z
					    min r1.z, r1.z, c31.y
					    rsq r1.z, r1.z
					    rcp r1.z, r1.z
					    mul r2.w, c20.w, v2.w
					    mul r2.xyz, r2.w, c20
					    mul r3, c17, v2
					    mul r3.xyz, r3.w, r3
					    add r2, r2, -r3
					    mad o2, r1.z, r2, r3
					    mov o1, r3
					    sge r1.z, c31.x, v4.y
					    mov r2.x, c22.x
					    add r1.w, -r2.x, c23.x
					    mad r1.z, r1.z, r1.w, c22.x
					    mul r1.x, r1.x, c18.x
					    mul r1.x, r1.x, c31.w
					    rcp r1.w, c27.x
					    mad r1.x, r1.z, r1.w, r1.x
					    add r1.x, -r1.x, c31.w
					    mad r0.w, r1.x, r0.x, -c31.w
					    mad o4.y, r1.y, -r0.x, r0.w
					    mad o4.z, r1.y, r0.x, r0.w
					    mov o4.xw, r0
					    rcp r1.z, r0.y
					    rcp r1.w, r0.z
					    mul o5.zw, r1, c31.w
					    mov o3.xy, v3
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 91 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[15];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_12[3];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_17[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    vs_TEXCOORD2.xy = u_xlat0.xy;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2 = in_COLOR0 * _FaceColor;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    vs_COLOR0 = u_xlat2;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = abs(u_xlat4.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat4.xy = u_xlat1.ww / u_xlat4.xy;
					    u_xlat12 = dot(u_xlat4.xy, u_xlat4.xy);
					    vs_TEXCOORD2.zw = vec2(0.5, 0.5) / u_xlat4.xy;
					    u_xlat4.x = inversesqrt(u_xlat12);
					    u_xlat8 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat8 = u_xlat4.x * 1.5;
					    u_xlat12 = (-_PerspectiveFilter) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat8;
					    u_xlat4.x = u_xlat4.x * 1.5 + (-u_xlat12);
					    u_xlat0.x = abs(u_xlat0.x) * u_xlat4.x + u_xlat12;
					    u_xlatb4 = glstate_matrix_projection[3].w==0.0;
					    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat8;
					    u_xlat4.xy = vec2(_FaceDilate, _OutlineSoftness) * vec2(vec2(_ScaleRatioA, _ScaleRatioA));
					    u_xlat8 = u_xlat4.y * u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat8 = _OutlineWidth * _ScaleRatioA;
					    u_xlat8 = u_xlat8 * 0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat8;
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat3.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat3.xyz = u_xlat3.www * _OutlineColor.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    vs_COLOR1 = u_xlat1.xxxx * u_xlat3 + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb1 = 0.0>=in_TEXCOORD1.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat5 = (-_WeightNormal) + _WeightBold;
					    u_xlat1.x = u_xlat1.x * u_xlat5 + _WeightNormal;
					    u_xlat1.x = u_xlat1.x / _GradientScale;
					    u_xlat4.x = u_xlat4.x * 0.5 + u_xlat1.x;
					    u_xlat4.x = (-u_xlat4.x) + 0.5;
					    u_xlat0.w = u_xlat4.x * u_xlat0.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat8) * u_xlat0.x + u_xlat0.w;
					    vs_TEXCOORD1.z = u_xlat8 * u_xlat0.x + u_xlat0.w;
					    vs_TEXCOORD1.xw = u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "OUTLINE_ON" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _FaceColor;
					//   float _FaceDilate;
					//   float _GradientScale;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleRatioC;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _UnderlayColor;
					//   float _UnderlayDilate;
					//   float _UnderlayOffsetX;
					//   float _UnderlayOffsetY;
					//   float _UnderlaySoftness;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ObjectToWorld       c0       4
					//   glstate_matrix_projection c4       4
					//   unity_MatrixVP            c8       4
					//   unity_WorldToObject       c12      3
					//   _WorldSpaceCameraPos      c15      1
					//   _ScreenParams             c16      1
					//   _FaceColor                c17      1
					//   _FaceDilate               c18      1
					//   _OutlineSoftness          c19      1
					//   _OutlineColor             c20      1
					//   _OutlineWidth             c21      1
					//   _UnderlayColor            c22      1
					//   _UnderlayOffsetX          c23      1
					//   _UnderlayOffsetY          c24      1
					//   _UnderlayDilate           c25      1
					//   _UnderlaySoftness         c26      1
					//   _WeightNormal             c27      1
					//   _WeightBold               c28      1
					//   _ScaleRatioA              c29      1
					//   _ScaleRatioC              c30      1
					//   _VertexOffsetX            c31      1
					//   _VertexOffsetY            c32      1
					//   _TextureWidth             c33      1
					//   _TextureHeight            c34      1
					//   _GradientScale            c35      1
					//   _ScaleX                   c36      1
					//   _ScaleY                   c37      1
					//   _PerspectiveFilter        c38      1
					//
					
					    vs_3_0
					    def c39, 0, 1, 1.5, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_color1 o2
					    dcl_texcoord o3.xy
					    dcl_texcoord1 o4
					    dcl_texcoord2 o5
					    dcl_texcoord3 o6.xy
					    dcl_texcoord4 o7
					    dcl_texcoord5 o8.xy
					    add r0.x, c31.x, v0.x
					    add r0.y, c32.x, v0.y
					    mad r0.zw, v0.z, c39.xyyx, c39.xyxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r5.x, c8, r1
					    dp4 r5.y, c9, r1
					    dp4 r5.z, c10, r1
					    dp4 r1.x, c11, r1
					    mov r0.w, v0.w
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    mov o5.xy, r0
					    add r0.xyz, -r2, c15
					    nrm r2.xyz, r0
					    mul r0.xyz, c13, v1.y
					    mad r0.xyz, v1.x, c12, r0
					    mad r0.xyz, v1.z, c14, r0
					    nrm r3.xyz, r0
					    dp3 r0.x, r3, r2
					    mov r2.xy, c16
					    mul r0.yz, r2.xxyw, c4.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c36.x
					    rcp r3.x, r0.y
					    mul r0.yz, r2.xxyw, c5.xxyw
					    add r0.y, r0.z, r0.y
					    mul r0.y, r0_abs.y, c37.x
					    rcp r3.y, r0.y
					    mul r0.yz, r1.x, r3.xxyw
					    mov r5.w, r1.x
					    mul r1.xy, r0.yzzw, r0.yzzw
					    add r0.w, r1.y, r1.x
					    rsq r0.w, r0.w
					    mul r1.x, c35.x, v4_abs.y
					    mul r0.w, r0.w, r1.x
					    mul r1.x, r0.w, c39.z
					    mov r1.y, c39.y
					    add r1.y, r1.y, -c38.x
					    mul r1.y, r1.y, r1.x
					    mad r1.z, r0.w, c39.z, -r1.y
					    mad r0.x, r0_abs.x, r1.z, r1.y
					    mad r0.x, r0.w, -c39.z, r0.x
					    abs r0.w, c7.w
					    sge r0.w, -r0.w, r0.w
					    mad r0.x, r0.w, r0.x, r1.x
					    mov r1.x, c29.x
					    mul r0.w, r1.x, c19.x
					    mad r0.w, r0.w, r0.x, c39.y
					    rcp r0.w, r0.w
					    mul r2.x, r0.w, r0.x
					    mul r0.w, r1.x, c21.x
					    mul r0.w, r0.w, c39.w
					    mul r1.y, r2.x, r0.w
					    add r1.y, r1.y, r1.y
					    min r1.y, r1.y, c39.y
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    mul r3.w, c20.w, v2.w
					    mul r3.xyz, r3.w, c20
					    mul r4, c17, v2
					    mul r4.xyz, r4.w, r4
					    add r3, r3, -r4
					    mad o2, r1.y, r3, r4
					    mov o1, r4
					    mul r1.y, c22.w, v2.w
					    mul o7.xyz, r1.y, c22
					    mov o7.w, r1.y
					    mov r3.x, c30.x
					    mul r1.y, r3.x, c26.x
					    mad r1.y, r1.y, r0.x, c39.y
					    rcp r1.y, r1.y
					    mul r0.x, r0.x, r1.y
					    sge r1.y, c39.x, v4.y
					    mov r4.x, c27.x
					    add r1.z, -r4.x, c28.x
					    mad r1.y, r1.y, r1.z, c27.x
					    mul r1.x, r1.x, c18.x
					    mul r1.x, r1.x, c39.w
					    rcp r1.z, c35.x
					    mad r1.x, r1.y, r1.z, r1.x
					    add r1.y, -r1.x, c39.w
					    lrp r2.y, r0.x, -r1.x, -c39.w
					    mad r2.w, r1.y, r2.x, -c39.w
					    mul r1.x, r3.x, c25.x
					    mul r1.x, r1.x, c39.w
					    mad o8.y, r1.x, -r0.x, r2.y
					    mov o8.x, r0.x
					    mad o4.y, r0.w, -r2.x, r2.w
					    mad o4.z, r0.w, r2.x, r2.w
					    mov o4.xw, r2
					    rcp r1.z, r0.y
					    rcp r1.w, r0.z
					    mul o5.zw, r1, c39.w
					    mul r0.x, r3.x, c23.x
					    mul r0.x, -r0.x, c35.x
					    rcp r0.y, c33.x
					    mul r0.x, r0.y, r0.x
					    mul r0.z, r3.x, c24.x
					    mul r0.z, -r0.z, c35.x
					    rcp r0.w, c34.x
					    mul r0.y, r0.w, r0.z
					    add o6.xy, r0, v3
					    mov o3.xy, v3
					    mad o0.xy, r5.w, c255, r5
					    mov o0.zw, r5
					
					// approximately 113 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "OUTLINE_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec4 _FaceColor;
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_6[11];
						vec4 _UnderlayColor;
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_12[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_19[2];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_26[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[8];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD4;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    vs_TEXCOORD2.xy = u_xlat0.xy;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2 = in_COLOR0 * _FaceColor;
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz;
					    vs_COLOR0 = u_xlat2;
					    u_xlat3.w = in_COLOR0.w * _OutlineColor.w;
					    u_xlat3.xyz = u_xlat3.www * _OutlineColor.xyz;
					    u_xlat3 = (-u_xlat2) + u_xlat3;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = abs(u_xlat4.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat4.xy = u_xlat1.ww / u_xlat4.xy;
					    u_xlat12 = dot(u_xlat4.xy, u_xlat4.xy);
					    vs_TEXCOORD2.zw = vec2(0.5, 0.5) / u_xlat4.xy;
					    u_xlat4.x = inversesqrt(u_xlat12);
					    u_xlat8 = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat4.x = u_xlat4.x * u_xlat8;
					    u_xlat8 = u_xlat4.x * 1.5;
					    u_xlat12 = (-_PerspectiveFilter) + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat8;
					    u_xlat4.x = u_xlat4.x * 1.5 + (-u_xlat12);
					    u_xlat0.x = abs(u_xlat0.x) * u_xlat4.x + u_xlat12;
					    u_xlatb4 = glstate_matrix_projection[3].w==0.0;
					    u_xlat0.x = (u_xlatb4) ? u_xlat0.x : u_xlat8;
					    u_xlat4.xy = vec2(_FaceDilate, _OutlineSoftness) * vec2(vec2(_ScaleRatioA, _ScaleRatioA));
					    u_xlat8 = u_xlat4.y * u_xlat0.x + 1.0;
					    u_xlat1.x = u_xlat0.x / u_xlat8;
					    u_xlat8 = _OutlineWidth * _ScaleRatioA;
					    u_xlat8 = u_xlat8 * 0.5;
					    u_xlat12 = u_xlat1.x * u_xlat8;
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = sqrt(u_xlat12);
					    vs_COLOR1 = vec4(u_xlat12) * u_xlat3 + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat2 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat5.xy = (-u_xlat2.zw) * vec2(_GradientScale);
					    u_xlat5.xy = u_xlat5.xy / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD3.xy = u_xlat5.xy + in_TEXCOORD0.xy;
					    u_xlatb12 = 0.0>=in_TEXCOORD1.y;
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat12 = u_xlat12 * u_xlat5.x + _WeightNormal;
					    u_xlat12 = u_xlat12 / _GradientScale;
					    u_xlat4.x = u_xlat4.x * 0.5 + u_xlat12;
					    u_xlat4.x = (-u_xlat4.x) + 0.5;
					    u_xlat1.w = u_xlat4.x * u_xlat1.x + -0.5;
					    vs_TEXCOORD1.y = (-u_xlat8) * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.z = u_xlat8 * u_xlat1.x + u_xlat1.w;
					    vs_TEXCOORD1.xw = u_xlat1.xw;
					    u_xlat8 = in_COLOR0.w * _UnderlayColor.w;
					    vs_TEXCOORD4.xyz = vec3(u_xlat8) * _UnderlayColor.xyz;
					    vs_TEXCOORD4.w = u_xlat8;
					    u_xlat8 = u_xlat2.x * u_xlat0.x + 1.0;
					    u_xlat0.x = u_xlat0.x / u_xlat8;
					    u_xlat8 = u_xlat2.y * 0.5;
					    u_xlat4.x = u_xlat4.x * u_xlat0.x + -0.5;
					    vs_TEXCOORD5.y = (-u_xlat8) * u_xlat0.x + u_xlat4.x;
					    vs_TEXCOORD5.x = u_xlat0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   sampler2D _MainTex;
					//   bool _UseClipRect;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _UseClipRect c0       1
					//   _ClipRect    c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1_pp v2.xw
					    dcl_texcoord2 v3.xy
					    dcl_2d s0
					    add r0.xy, c1.zwzw, -v3
					    cmp r0.xy, r0, c2.x, c2.y
					    add r0.zw, -c1.xyxy, v3.xyxy
					    cmp r0.xy, r0.zwzw, r0, c2.y
					    mul r0.x, r0.y, r0.x
					    texld r1, v1, s0
					    mad_sat_pp r0.y, r1.w, v2.x, -v2.w
					    mul_pp r1, r0.y, v0
					    mul_pp r0, r0.x, r1
					    cmp_pp oC0, -c0.x, r1, r0
					
					// approximately 10 instruction slots used (1 texture, 9 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[28];
						int _UseClipRect;
						vec4 _ClipRect;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					void main()
					{
					    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD2.xyxx, _ClipRect.xyxx).xy;
					    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD2.xxxy).zw;
					    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
					    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat1 = vec4(u_xlat2) * vs_COLOR0;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    SV_Target0 = (_UseClipRect != 0) ? u_xlat0 : u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   sampler2D _MainTex;
					//   bool _UseClipRect;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _UseClipRect c0       1
					//   _ClipRect    c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1_pp v2.xw
					    dcl_texcoord2 v3.xy
					    dcl_texcoord3 v4.xy
					    dcl_texcoord4_pp v5
					    dcl_texcoord5_pp v6.xy
					    dcl_2d s0
					    add r0.xy, c1.zwzw, -v3
					    cmp r0.xy, r0, c2.x, c2.y
					    add r0.zw, -c1.xyxy, v3.xyxy
					    cmp r0.xy, r0.zwzw, r0, c2.y
					    mul r0.x, r0.y, r0.x
					    texld r1, v4, s0
					    mad_sat_pp r0.y, r1.w, v6.x, -v6.y
					    texld r1, v1, s0
					    mad_sat_pp r0.z, r1.w, v2.x, -v2.w
					    mad_pp r0.w, v0.w, -r0.z, c2.x
					    mul_pp r1, r0.z, v0
					    mul_pp r0.y, r0.w, r0.y
					    mad_pp r1, v5, r0.y, r1
					    mul_pp r0, r0.x, r1
					    cmp_pp oC0, -c0.x, r1, r0
					
					// approximately 15 instruction slots used (2 texture, 13 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[28];
						int _UseClipRect;
						vec4 _ClipRect;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD2.xyxx, _ClipRect.xyxx).xy;
					    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD2.xxxy).zw;
					    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
					    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat2 = u_xlat10_1.w * vs_TEXCOORD5.x + (-vs_TEXCOORD5.y);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4 = u_xlat10_1.w * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat6 = (-vs_COLOR0.w) * u_xlat4 + 1.0;
					    u_xlat1 = vec4(u_xlat4) * vs_COLOR0;
					    u_xlat2 = u_xlat6 * u_xlat2;
					    u_xlat1 = vs_TEXCOORD4 * vec4(u_xlat2) + u_xlat1;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    SV_Target0 = (_UseClipRect != 0) ? u_xlat0 : u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "OUTLINE_ON" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   sampler2D _MainTex;
					//   bool _UseClipRect;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _UseClipRect c0       1
					//   _ClipRect    c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0, 0
					    dcl_color_pp v0
					    dcl_color1_pp v1
					    dcl_texcoord v2.xy
					    dcl_texcoord1_pp v3.xyz
					    dcl_texcoord2 v4.xy
					    dcl_2d s0
					    add r0.xy, c1.zwzw, -v4
					    cmp r0.xy, r0, c2.x, c2.y
					    add r0.zw, -c1.xyxy, v4.xyxy
					    cmp r0.xy, r0.zwzw, r0, c2.y
					    mul r0.x, r0.y, r0.x
					    mov r1, v1
					    add_pp r1, -r1, v0
					    texld r2, v2, s0
					    mad_sat_pp r0.yz, r2.w, v3.x, -v3.xzyw
					    mad_pp r1, r0.y, r1, v1
					    mul_pp r1, r0.z, r1
					    mul_pp r0, r0.x, r1
					    cmp_pp oC0, -c0.x, r1, r0
					
					// approximately 13 instruction slots used (1 texture, 12 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "OUTLINE_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[28];
						int _UseClipRect;
						vec4 _ClipRect;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD2.xyxx, _ClipRect.xyxx).xy;
					    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD2.xxxy).zw;
					    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
					    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat3.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat1 = u_xlat3.yyyy * u_xlat1;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    SV_Target0 = (_UseClipRect != 0) ? u_xlat0 : u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "OUTLINE_ON" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   sampler2D _MainTex;
					//   bool _UseClipRect;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _UseClipRect c0       1
					//   _ClipRect    c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0, 0
					    dcl_color_pp v0
					    dcl_color1_pp v1
					    dcl_texcoord v2.xy
					    dcl_texcoord1_pp v3.xyz
					    dcl_texcoord2 v4.xy
					    dcl_texcoord3 v5.xy
					    dcl_texcoord4_pp v6
					    dcl_texcoord5_pp v7.xy
					    dcl_2d s0
					    add r0.xy, c1.zwzw, -v4
					    cmp r0.xy, r0, c2.x, c2.y
					    add r0.zw, -c1.xyxy, v4.xyxy
					    cmp r0.xy, r0.zwzw, r0, c2.y
					    mul r0.x, r0.y, r0.x
					    texld r1, v5, s0
					    mad_sat_pp r0.y, r1.w, v7.x, -v7.y
					    mov r1, v1
					    add_pp r1, -r1, v0
					    texld r2, v2, s0
					    mad_sat_pp r0.zw, r2.w, v3.x, -v3.xyzy
					    mad_pp r1, r0.z, r1, v1
					    mad_pp r0.z, r1.w, -r0.w, c2.x
					    mul_pp r1, r0.w, r1
					    mul_pp r0.y, r0.z, r0.y
					    mad_pp r1, v6, r0.y, r1
					    mul_pp r0, r0.x, r1
					    cmp_pp oC0, -c0.x, r1, r0
					
					// approximately 18 instruction slots used (2 texture, 16 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "OUTLINE_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[28];
						int _UseClipRect;
						vec4 _ClipRect;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					float u_xlat3;
					vec2 u_xlat6;
					void main()
					{
					    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD2.xyxx, _ClipRect.xyxx).xy;
					    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD2.xxxy).zw;
					    u_xlat0 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb0));
					    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD3.xy);
					    u_xlat3 = u_xlat10_1.w * vs_TEXCOORD5.x + (-vs_TEXCOORD5.y);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat1 = vs_COLOR0 + (-vs_COLOR1);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat6.xy = u_xlat10_2.ww * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);
					    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
					    u_xlat1 = u_xlat6.xxxx * u_xlat1 + vs_COLOR1;
					    u_xlat6.x = (-u_xlat1.w) * u_xlat6.y + 1.0;
					    u_xlat1 = u_xlat6.yyyy * u_xlat1;
					    u_xlat3 = u_xlat6.x * u_xlat3;
					    u_xlat1 = vs_TEXCOORD4 * vec4(u_xlat3) + u_xlat1;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    SV_Target0 = (_UseClipRect != 0) ? u_xlat0 : u_xlat1;
					    return;
					}"
				}
			}
		}
	}
	CustomEditor "TMPro_SDFMaterialEditor"
}
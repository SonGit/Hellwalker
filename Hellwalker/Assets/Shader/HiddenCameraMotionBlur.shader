Shader "Hidden/CameraMotionBlur" {
	Properties {
		_MainTex ("-", 2D) = "" {}
		_NoiseTex ("-", 2D) = "grey" {}
		_VelTex ("-", 2D) = "black" {}
		_NeighbourMaxTex ("-", 2D) = "black" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			Cull Off
			GpuProgramID 63427
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _MainTex_TexelSize;
					//   float _MaxVelocity;
					//   row_major float4x4 _ToPrevViewProjCombined;
					//   float _VelocityScale;
					//
					//
					// Registers:
					//
					//   Name                    Reg   Size
					//   ----------------------- ----- ----
					//   _ToPrevViewProjCombined c0       4
					//   _MainTex_TexelSize      c4       1
					//   _VelocityScale          c5       1
					//   _MaxVelocity            c6       1
					//   _CameraDepthTexture     s0       1
					//
					
					    ps_3_0
					    def c7, 1, 2, -1, 0
					    def c8, 0.5, 0.00999999978, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mad r0.xy, v0, c7.y, c7.z
					    add r0.z, c7.x, -v0.y
					    cmp r1.y, c4.y, v0.y, r0.z
					    mov r1.x, v0.x
					    texld r1, r1, s0
					    mov r1.z, r1.x
					    mad r1.xyw, v0.xyzx, c7.yyzw, c7.zzzx
					    dp4 r0.z, c3, r1
					    rcp r0.z, r0.z
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    mad r0.xy, r2, -r0.z, r0
					    mov r0.zw, c4
					    mul r0.zw, r0, c5.x
					    mul r0.xy, r0, r0.zwzw
					    mul r0.xy, r0, c8.x
					    dp2add r0.z, r0, r0, c7.w
					    rsq r0.z, r0.z
					    rcp r0.z, r0.z
					    min r1.x, c6.x, r0.z
					    add r0.z, r0.z, c8.y
					    rcp r0.z, r0.z
					    max r0.w, c8.x, r1.x
					    mul r0.xy, r0.w, r0
					    mul r0.xy, r0.z, r0
					    mul oC0.xy, r0, c4
					    mov oC0.zw, c7.w
					
					// approximately 28 instruction slots used (1 texture, 27 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[10];
						mat4x4 _ToPrevViewProjCombined;
						float _VelocityScale;
						float _MaxVelocity;
						vec4 unused_0_6[3];
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					vec2 u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2.x = (-vs_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat2.x : vs_TEXCOORD0.y;
					    u_xlat0.x = vs_TEXCOORD0.x;
					    u_xlat10_0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xyz = u_xlat2.yyy * _ToPrevViewProjCombined[1].xyw;
					    u_xlat1.xyz = _ToPrevViewProjCombined[0].xyw * u_xlat2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = _ToPrevViewProjCombined[2].xyw * u_xlat10_0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _ToPrevViewProjCombined[3].xyw;
					    u_xlat0.xw = u_xlat1.xy / u_xlat1.zz;
					    u_xlat0.xy = (-u_xlat0.xw) + u_xlat2.xy;
					    u_xlat4.xy = _MainTex_TexelSize.zw * vec2(vec2(_VelocityScale, _VelocityScale));
					    u_xlat0.xy = u_xlat0.xy * u_xlat4.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
					    u_xlat4.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat6 = min(u_xlat4.x, _MaxVelocity);
					    u_xlat4.x = u_xlat4.x + 0.00999999978;
					    u_xlat6 = max(u_xlat6, 0.5);
					    u_xlat0.xy = vec2(u_xlat6) * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat4.xx;
					    SV_Target0.xy = u_xlat0.xy * _MainTex_TexelSize.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 130306
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _DisplayVelocityScale;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _DisplayVelocityScale c0       1
					//   _MainTex              s0       1
					//
					
					    ps_3_0
					    def c1, 1, -1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    abs r1.y, r0.y
					    mul r1.xzw, r0.xyxy, c1.xyyy
					    mul_sat oC0, r1, c0.x
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[18];
						float _DisplayVelocityScale;
						vec4 unused_0_2[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.y = abs(u_xlat10_0.y);
					    u_xlat1.xzw = u_xlat10_0.xxy * vec3(1.0, -1.0, -1.0);
					    SV_Target0 = u_xlat1 * vec4(vec4(_DisplayVelocityScale, _DisplayVelocityScale, _DisplayVelocityScale, _DisplayVelocityScale));
					    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 139268
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MaxRadiusOrKInPaper;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _MaxRadiusOrKInPaper c0       1
					//   _MainTex_TexelSize   c1       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c2, 0.5, 0, 1, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xy, c2
					    mul r0.x, r0.x, c0.x
					    mad r0.xz, c1.xyyw, -r0.x, v0.xyyw
					    frc r0.w, c0.x
					    add r1.x, -r0.w, c0.x
					    cmp r0.w, -r0.w, c2.y, c2.z
					    cmp r0.y, c0.x, r0.y, r0.w
					    add r0.y, r0.y, r1.x
					    mov r1.zw, c2.y
					    mov r2.xy, c2.y
					    mov r3.x, c2.y
					    rep i0
					      mov r0.w, r0.y
					      break_ge r3.x, r0.w
					      mov r2.zw, r2.xyxy
					      mov r3.y, c2.y
					      rep i0
					        mov r0.w, r0.y
					        break_ge r3.y, r0.w
					        mad r1.xy, r3, c1, r0.xzzw
					        texldl r4, r1, s0
					        dp2add r0.w, r2.zwzw, r2.zwzw, c2.y
					        dp2add r0.w, r4, r4, -r0.w
					        cmp r2.zw, r0.w, r4.xyxy, r2
					        add r3.y, r3.y, c2.z
					      endrep
					      mov r2.xy, r2.zwzw
					      add r3.x, r3.x, c2.z
					    endrep
					    mov oC0.xy, r2
					    mov oC0.zw, c2.xyyz
					
					// approximately 44 instruction slots used (2 texture, 42 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _MaxRadiusOrKInPaper;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[18];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_3;
					vec3 u_xlat6;
					bool u_xlatb6;
					int u_xlati8;
					vec2 u_xlat9;
					bool u_xlatb9;
					int u_xlati10;
					int u_xlati12;
					float u_xlat14;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0.x = _MaxRadiusOrKInPaper * 0.5;
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * u_xlat0.xx + vs_TEXCOORD0.xy;
					    u_xlati8 = int(_MaxRadiusOrKInPaper);
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati8 ; u_xlati_loop_1++)
					    {
					        u_xlat2.x = float(u_xlati_loop_1);
					        u_xlat9.xy = u_xlat1.xy;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<u_xlati8 ; u_xlati_loop_2++)
					        {
					            u_xlat2.y = float(u_xlati_loop_2);
					            u_xlat6.xz = u_xlat2.xy * _MainTex_TexelSize.xy + u_xlat0.xy;
					            u_xlat10_3 = textureLod(_MainTex, u_xlat6.xz, 0.0);
					            u_xlat6.x = dot(u_xlat9.xy, u_xlat9.xy);
					            u_xlat14 = dot(u_xlat10_3.xy, u_xlat10_3.xy);
					            u_xlatb6 = u_xlat14<u_xlat6.x;
					            u_xlat9.xy = (bool(u_xlatb6)) ? u_xlat9.xy : u_xlat10_3.xy;
					        }
					        u_xlat1.xy = u_xlat9.xy;
					    }
					    SV_Target0.xy = u_xlat1.xy;
					    SV_Target0.zw = vec2(0.0, 1.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 219018
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0, -1, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    add r0.xy, c0, v0
					    texld r0, r0, s0
					    dp2add r0.z, r0, r0, c1.y
					    mov r1.xyz, c1
					    mad r2, c0.xyxy, r1.xyxz, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    dp2add r0.z, r3, r3, -r0.z
					    cmp r0.xy, r0.z, r3, r0
					    dp2add r0.z, r0, r0, c1.y
					    dp2add r0.z, r2, r2, -r0.z
					    cmp r0.xy, r0.z, r2, r0
					    dp2add r0.z, r0, r0, c1.y
					    mad r2, c0.xyxy, r1.yxyz, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    dp2add r0.z, r3, r3, -r0.z
					    cmp r0.xy, r0.z, r3, r0
					    dp2add r0.z, r0, r0, c1.y
					    texld r3, v0, s0
					    dp2add r0.z, r3, r3, -r0.z
					    cmp r0.xy, r0.z, r3, r0
					    dp2add r0.z, r0, r0, c1.y
					    dp2add r0.z, r2, r2, -r0.z
					    cmp r0.xy, r0.z, r2, r0
					    dp2add r0.z, r0, r0, c1.y
					    mad r1, c0.xyxy, r1.zxzy, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    dp2add r0.z, r2, r2, -r0.z
					    cmp r0.xy, r0.z, r2, r0
					    dp2add r0.z, r0, r0, c1.y
					    dp2add r0.z, r1, r1, -r0.z
					    cmp r0.xy, r0.z, r1, r0
					    dp2add r0.z, r0, r0, c1.y
					    add r1.xy, -c0, v0
					    texld r1, r1, s0
					    dp2add r0.z, r1, r1, -r0.z
					    cmp oC0.xy, r0.z, r1, r0
					    mov oC0.zw, c1.y
					
					// approximately 56 instruction slots used (9 texture, 47 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[18];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat6 = dot(u_xlat10_0.xy, u_xlat10_0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, 0.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat9 = dot(u_xlat10_2.xy, u_xlat10_2.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    u_xlat0.xy = (bool(u_xlatb6)) ? u_xlat10_0.xy : u_xlat10_2.xy;
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = dot(u_xlat10_1.xy, u_xlat10_1.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    u_xlat0.xy = (bool(u_xlatb6)) ? u_xlat0.xy : u_xlat10_1.xy;
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, 1.0, 0.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat9 = dot(u_xlat10_2.xy, u_xlat10_2.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    u_xlat0.xy = (bool(u_xlatb6)) ? u_xlat0.xy : u_xlat10_2.xy;
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat9 = dot(u_xlat10_2.xy, u_xlat10_2.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    u_xlat0.xy = (bool(u_xlatb6)) ? u_xlat0.xy : u_xlat10_2.xy;
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = dot(u_xlat10_1.xy, u_xlat10_1.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    u_xlat0.xy = (bool(u_xlatb6)) ? u_xlat0.xy : u_xlat10_1.xy;
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, -1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat9 = dot(u_xlat10_2.xy, u_xlat10_2.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    u_xlat0.xy = (bool(u_xlatb6)) ? u_xlat0.xy : u_xlat10_2.xy;
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat9 = dot(u_xlat10_1.xy, u_xlat10_1.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    u_xlat0.xy = (bool(u_xlatb6)) ? u_xlat0.xy : u_xlat10_1.xy;
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat9 = dot(u_xlat10_1.xy, u_xlat10_1.xy);
					    u_xlatb6 = u_xlat9<u_xlat6;
					    SV_Target0.xy = (bool(u_xlatb6)) ? u_xlat0.xy : u_xlat10_1.xy;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 267991
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float _Jitter;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _NeighbourMaxTex;
					//   sampler2D _NoiseTex;
					//   float _SoftZDistance;
					//   sampler2D _VelTex;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _MainTex_TexelSize  c1       1
					//   _Jitter             c2       1
					//   _SoftZDistance      c3       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//   _VelTex             s2       1
					//   _NeighbourMaxTex    s3       1
					//   _NoiseTex           s4       1
					//
					
					    ps_3_0
					    def c4, -5, 1, -2, 3
					    def c5, 1, 0, 11, -2
					    def c6, 0.75, 10, 0.0999999642, 0.949999988
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.x, c5.x, -v0.y
					    cmp r0.y, c1.y, v0.y, r0.x
					    mul r0.xzw, c5.xyyy, v0.x
					    texldl r1, r0.xyww, s3
					    mul r2, c5.xxyy, v0.xyxx
					    texldl r3, r2, s0
					    texldl r0, r0, s2
					    texldl r4, r2, s1
					    mad r0.z, c0.x, r4.x, c0.y
					    rcp r0.z, r0.z
					    mul r2, r2, c5.z
					    texldl r2, r2, s4
					    mad r0.w, r2.x, -c5.w, -c5.x
					    mul r2, r3, c6.x
					    mov r3.y, c6.y
					    add r1.z, r3.y, c2.x
					    rcp r1.z, r1.z
					    rcp r1.w, c3.x
					    dp2add r0.x, r0, r0, c5.y
					    rsq r0.x, r0.x
					    rcp r0.y, r0.x
					    mul r3.x, r0.y, c6.z
					    rcp r3.x, r3.x
					    mov r4.w, c5.y
					    mov r5, r2
					    mov r3.y, c6.x
					    mov r3.z, c5.y
					    rep i0
					      add r6.xy, r3.z, c4
					      cmp r3.w, -r6_abs.x, c5.y, c5.x
					      mad r6.x, r0.w, c2.x, r3.z
					      dp2add r6.x, r6.x, r1.z, -c5.x
					      mul r6.zw, r1.xyxy, r6.x
					      mad r4.xy, r1, r6.x, v0
					      add r6.x, -r4.y, c5.x
					      cmp r4.z, c1.y, r4.y, r6.x
					      texldl r7, r4.xzww, s2
					      texldl r8, r4.xyww, s1
					      mad r4.z, c0.x, r8.x, c0.y
					      rcp r4.z, r4.z
					      add r6.x, -r0.z, r4.z
					      mad_sat r6.x, r6.x, -r1.w, c5.x
					      add r4.z, r0.z, -r4.z
					      mad_sat r4.z, r4.z, -r1.w, c5.x
					      add r7.zw, -r4.xyxy, v0.xyxy
					      dp2add r7.z, r7.zwzw, r7.zwzw, c5.y
					      rsq r7.z, r7.z
					      rcp r7.z, r7.z
					      mad r7.w, r7.z, -r0.x, c5.x
					      max r8.x, r7.w, c5.y
					      dp2add r6.z, r6.zwzw, r6.zwzw, c5.y
					      rsq r6.z, r6.z
					      rcp r6.z, r6.z
					      dp2add r6.w, r7, r7, c5.y
					      rsq r6.w, r6.w
					      mad r7.x, r6.z, -r6.w, c5.x
					      max r8.y, r7.x, c5.y
					      mul r6.x, r6.x, r8.y
					      mad r4.z, r4.z, r8.x, r6.x
					      rcp r6.x, r6.w
					      mul r6.w, r6.x, c6.z
					      mad r6.x, r6.x, -c6.w, r6.z
					      rcp r6.z, r6.w
					      mul_sat r6.x, r6.z, r6.x
					      mad r6.z, r6.x, c4.z, c4.w
					      mul r6.x, r6.x, r6.x
					      mad r6.x, r6.z, -r6.x, c5.x
					      mad r6.z, r0.y, -c6.w, r7.z
					      mul_sat r6.z, r3.x, r6.z
					      mad r6.w, r6.z, c4.z, c4.w
					      mul r6.z, r6.z, r6.z
					      mad r6.z, r6.w, -r6.z, c5.x
					      dp2add r4.z, r6.x, r6.z, r4.z
					      texldl r7, r4.xyww, s0
					      mul r7, r4.z, r7
					      mad r5, r7, r3.w, r5
					      mad r3.y, r4.z, r3.w, r3.y
					      mov r3.z, r6.y
					    endrep
					    rcp r0.x, r3.y
					    mul oC0, r0.x, r5
					
					// approximately 98 instruction slots used (16 texture, 82 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[14];
						float _Jitter;
						vec4 unused_0_4[2];
						float _SoftZDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _NeighbourMaxTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _VelTex;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _NoiseTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					bool u_xlatb0;
					vec2 u_xlat1;
					float u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					vec4 u_xlat16_3;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					vec2 u_xlat5;
					vec4 u_xlat10_5;
					vec3 u_xlat6;
					vec4 u_xlat10_7;
					vec4 u_xlat10_8;
					float u_xlat9;
					float u_xlat16_10;
					float u_xlat14;
					vec2 u_xlat18;
					float u_xlat16_18;
					float u_xlat19;
					vec2 u_xlat20;
					bool u_xlatb20;
					vec2 u_xlat23;
					float u_xlat24;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					float u_xlat32;
					void main()
					{
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat9 = (-vs_TEXCOORD0.y) + 1.0;
					    u_xlat1.y = (u_xlatb0) ? u_xlat9 : vs_TEXCOORD0.y;
					    u_xlat1.x = vs_TEXCOORD0.x;
					    u_xlat10_2 = textureLod(_NeighbourMaxTex, u_xlat1.xy, 0.0);
					    u_xlat10_3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = textureLod(_VelTex, u_xlat1.xy, 0.0);
					    u_xlat10_4 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat9 = _ZBufferParams.x * u_xlat10_4.x + _ZBufferParams.y;
					    u_xlat9 = float(1.0) / u_xlat9;
					    u_xlat18.xy = vs_TEXCOORD0.xy * vec2(11.0, 11.0);
					    u_xlat10_4 = textureLod(_NoiseTex, u_xlat18.xy, 0.0);
					    u_xlat16_18 = u_xlat10_4.x * 2.0 + -1.0;
					    u_xlat16_3 = u_xlat10_3 * vec4(0.75, 0.75, 0.75, 0.75);
					    u_xlat27 = _Jitter + 10.0;
					    u_xlat16_1 = dot(u_xlat10_1.xy, u_xlat10_1.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_10 = u_xlat16_1 * 0.0999999642;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat4 = u_xlat16_3;
					    u_xlat19 = float(0.75);
					    u_xlati28 = int(0);
					    while(true){
					        u_xlatb20 = u_xlati28>=11;
					        if(u_xlatb20){break;}
					        u_xlatb20 = u_xlati28==5;
					        if(u_xlatb20){
					            u_xlati28 = 6;
					            continue;
					        //ENDIF
					        }
					        u_xlat20.x = float(u_xlati28);
					        u_xlat20.x = u_xlat16_18 * _Jitter + u_xlat20.x;
					        u_xlat20.x = u_xlat20.x / u_xlat27;
					        u_xlat20.x = u_xlat20.x * 2.0 + -1.0;
					        u_xlat5.xy = u_xlat20.xx * u_xlat10_2.xy;
					        u_xlat6.xy = u_xlat10_2.xy * u_xlat20.xx + vs_TEXCOORD0.xy;
					        u_xlat20.x = (-u_xlat6.y) + 1.0;
					        u_xlat6.z = (u_xlatb0) ? u_xlat20.x : u_xlat6.y;
					        u_xlat10_7 = textureLod(_VelTex, u_xlat6.xz, 0.0);
					        u_xlat10_8 = textureLod(_CameraDepthTexture, u_xlat6.xy, 0.0);
					        u_xlat20.x = _ZBufferParams.x * u_xlat10_8.x + _ZBufferParams.y;
					        u_xlat20.x = float(1.0) / u_xlat20.x;
					        u_xlat29 = (-u_xlat9) + u_xlat20.x;
					        u_xlat20.y = u_xlat29 / _SoftZDistance;
					        u_xlat20.x = u_xlat9 + (-u_xlat20.x);
					        u_xlat20.x = u_xlat20.x / _SoftZDistance;
					        u_xlat20.xy = (-u_xlat20.xy) + vec2(1.0, 1.0);
					        u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
					        u_xlat23.xy = (-u_xlat6.xy) + vs_TEXCOORD0.xy;
					        u_xlat23.x = dot(u_xlat23.xy, u_xlat23.xy);
					        u_xlat23.x = sqrt(u_xlat23.x);
					        u_xlat32 = u_xlat23.x / u_xlat16_1;
					        u_xlat32 = (-u_xlat32) + 1.0;
					        u_xlat32 = max(u_xlat32, 0.0);
					        u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);
					        u_xlat5.y = dot(u_xlat10_7.xy, u_xlat10_7.xy);
					        u_xlat5.xy = sqrt(u_xlat5.xy);
					        u_xlat24 = u_xlat5.x / u_xlat5.y;
					        u_xlat24 = (-u_xlat24) + 1.0;
					        u_xlat24 = max(u_xlat24, 0.0);
					        u_xlat29 = u_xlat20.y * u_xlat24;
					        u_xlat20.x = u_xlat20.x * u_xlat32 + u_xlat29;
					        u_xlat29 = u_xlat5.y * 0.0999999642;
					        u_xlat5.x = (-u_xlat5.y) * 0.949999988 + u_xlat5.x;
					        u_xlat29 = float(1.0) / u_xlat29;
					        u_xlat29 = u_xlat29 * u_xlat5.x;
					        u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					        u_xlat5.x = u_xlat29 * -2.0 + 3.0;
					        u_xlat29 = u_xlat29 * u_xlat29;
					        u_xlat29 = (-u_xlat5.x) * u_xlat29 + 1.0;
					        u_xlat5.x = (-u_xlat16_1) * 0.949999988 + u_xlat23.x;
					        u_xlat5.x = u_xlat16_10 * u_xlat5.x;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat14 = u_xlat5.x * -2.0 + 3.0;
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = (-u_xlat14) * u_xlat5.x + 1.0;
					        u_xlat29 = dot(vec2(u_xlat29), u_xlat5.xx);
					        u_xlat20.x = u_xlat29 + u_xlat20.x;
					        u_xlat10_5 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					        u_xlat4 = u_xlat10_5 * u_xlat20.xxxx + u_xlat4;
					        u_xlat19 = u_xlat19 + u_xlat20.x;
					        u_xlati28 = u_xlati28 + 1;
					    }
					    SV_Target0 = u_xlat4 / vec4(u_xlat19);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 356314
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   sampler2D _VelTex;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//   _VelTex            s1       1
					//
					
					    ps_3_0
					    def c1, 0.100000001, -0.5, 0, 0
					    def c2, 1, 0, 0, 0.0909090936
					    defi i0, 11, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0.x, c2.x, -v0.y
					    cmp r0.y, c0.y, v0.y, r0.x
					    mov r0.x, v0.x
					    texld r0, r0, s1
					    mov r1, c2.z
					    mov r0.z, c2.z
					    rep i0
					      mad r0.w, r0.z, c1.x, c1.y
					      mad r2.xy, r0, -r0.w, v0
					      texld r2, r2, s0
					      add r1, r1, r2
					      add r0.z, r0.z, c2.x
					    endrep
					    mul oC0, r1, c2.w
					
					// approximately 17 instruction slots used (2 texture, 15 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[18];
					};
					uniform  sampler2D _VelTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec4 u_xlat10_2;
					float u_xlat3;
					int u_xlati6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-vs_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : vs_TEXCOORD0.y;
					    u_xlat0.x = vs_TEXCOORD0.x;
					    u_xlat10_0 = texture(_VelTex, u_xlat0.xy);
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					    {
					        u_xlat9 = float(u_xlati_loop_1);
					        u_xlat9 = u_xlat9 * 0.100000001 + -0.5;
					        u_xlat2.xy = (-u_xlat10_0.xy) * vec2(u_xlat9) + vs_TEXCOORD0.xy;
					        u_xlat10_2 = texture(_MainTex, u_xlat2.xy);
					        u_xlat1 = u_xlat1 + u_xlat10_2;
					    }
					    SV_Target0 = u_xlat1 * vec4(0.0909090936, 0.0909090936, 0.0909090936, 0.0909090936);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 405255
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _BlurDirectionPacked;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MaxVelocity;
					//   float _MinVelocity;
					//   float _VelocityScale;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _MainTex_TexelSize   c0       1
					//   _VelocityScale       c1       1
					//   _MaxVelocity         c2       1
					//   _MinVelocity         c3       1
					//   _BlurDirectionPacked c4       1
					//   _MainTex             s0       1
					//
					
					    ps_3_0
					    def c5, 2, -1, 1, 0
					    def c6, 2.25, 0.25, -2, 3
					    def c7, 0.0625, 0, 0.0588235296, 0
					    defi i0, 16, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mad r0.xy, v0, c5.x, c5.y
					    rcp r0.z, c0.z
					    mul r1.y, r0.z, c0.w
					    mov r1.xzw, c5.zyzw
					    mul r0.xy, r0, r1
					    mul r1, r1.wzzw, c4.xxyy
					    add r1.xy, r1.zwzw, r1
					    mov r0.z, -r0.x
					    mad r0.zw, c4.z, r0.xyyz, r1.xyxy
					    mad r0.xy, c4.w, r0, r0.zwzw
					    mul r0.xy, r0, c1.x
					    dp2add r0.w, r0, r0, c5.w
					    rsq r0.w, r0.w
					    rcp r0.z, r0.w
					    add r1.x, -r0.z, c2.x
					    mul r0.w, r0.w, c2.x
					    mul r2.xy, r0.w, r0
					    mov r2.z, c2.x
					    cmp r0.xyz, r1.x, r0, r2
					    texld r1, v0, s0
					    mov r2.xy, c6
					    mul r0.w, r2.x, c3.x
					    mad r0.z, c3.x, -r2.y, r0.z
					    rcp r0.w, r0.w
					    mul_sat r0.z, r0.w, r0.z
					    mad r0.w, r0.z, c6.z, c6.w
					    mul r0.z, r0.z, r0.z
					    mul r0.z, r0.z, r0.w
					    mul r0.xy, r0.z, r0
					    mul r0.xy, r0, c0
					    mul r0.xy, r0, c7.x
					    mov r2, r1
					    mov r0.z, c5.w
					    rep i0
					      mad r3.xy, r0.z, r0, v0
					      texld r3, r3, s0
					      add r2, r2, r3
					      add r0.z, r0.z, c5.z
					    endrep
					    mul oC0, r2, c7.z
					
					// approximately 44 instruction slots used (2 texture, 42 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[14];
						float _VelocityScale;
						float _MaxVelocity;
						float _MinVelocity;
						vec4 _BlurDirectionPacked;
						vec4 unused_0_7;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec4 u_xlat10_3;
					vec2 u_xlat8;
					int u_xlati8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.y = _MainTex_TexelSize.w / _MainTex_TexelSize.z;
					    u_xlat1.x = 1.0;
					    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;
					    u_xlat1 = _BlurDirectionPacked.xxyy * vec4(0.0, 1.0, 1.0, 0.0);
					    u_xlat1.xy = u_xlat1.zw + u_xlat1.xy;
					    u_xlat0.z = (-u_xlat0.x);
					    u_xlat8.xy = _BlurDirectionPacked.zz * u_xlat0.yz + u_xlat1.xy;
					    u_xlat0.xy = _BlurDirectionPacked.ww * u_xlat0.xy + u_xlat8.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_VelocityScale, _VelocityScale));
					    u_xlat12 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.z = sqrt(u_xlat12);
					    u_xlatb12 = _MaxVelocity<u_xlat0.z;
					    u_xlat1.x = _MaxVelocity / u_xlat0.z;
					    u_xlat1.xy = u_xlat0.xy * u_xlat1.xx;
					    u_xlat1.z = _MaxVelocity;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat12 = _MinVelocity * 2.25;
					    u_xlat8.x = (-_MinVelocity) * 0.25 + u_xlat0.z;
					    u_xlat12 = float(1.0) / u_xlat12;
					    u_xlat8.x = u_xlat12 * u_xlat8.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat12 = u_xlat8.x * -2.0 + 3.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat12;
					    u_xlat0.xy = u_xlat8.xx * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * _MainTex_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.0625, 0.0625);
					    u_xlat2 = u_xlat10_1;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					    {
					        u_xlat12 = float(u_xlati_loop_1);
					        u_xlat3.xy = vec2(u_xlat12) * u_xlat0.xy + vs_TEXCOORD0.xy;
					        u_xlat10_3 = texture(_MainTex, u_xlat3.xy);
					        u_xlat2 = u_xlat2 + u_xlat10_3;
					    }
					    SV_Target0 = u_xlat2 * vec4(0.0588235296, 0.0588235296, 0.0588235296, 0.0588235296);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 501493
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float _Jitter;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _MaxVelocity;
					//   sampler2D _NeighbourMaxTex;
					//   sampler2D _NoiseTex;
					//   float _SoftZDistance;
					//   sampler2D _VelTex;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _MainTex_TexelSize  c1       1
					//   _Jitter             c2       1
					//   _MaxVelocity        c3       1
					//   _SoftZDistance      c4       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//   _VelTex             s2       1
					//   _NeighbourMaxTex    s3       1
					//   _NoiseTex           s4       1
					//
					
					    ps_3_0
					    def c5, 1, 0, 11, -2
					    def c6, 0.150000006, 0.0999999642, 0, 0.949999988
					    def c7, -0, -1, -2, -3
					    def c8, -4, -5, -6, -7
					    def c9, -8, -9, -10, -11
					    def c10, -0.791558981, -0.597710013, -2, 3
					    def c11, -0.326211989, -0.405809999, 0, 0
					    def c12, -0.840143979, -0.0735799968, -0.69591397, 0.457136989
					    def c13, -0.203345001, 0.620715976, 0.962339997, -0.194983006
					    def c14, 0.473434001, -0.480026007, 0.519456029, 0.767022014
					    def c15, 0.185461, -0.893123984, 0.507430971, 0.0644249991
					    def c16, 0.896420002, 0.412458003, -0.321940005, -0.932614982
					    defi i0, 12, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.x, c5.x, -v0.y
					    cmp r0.y, c1.y, v0.y, r0.x
					    mul r0.xzw, c5.xyyy, v0.x
					    texldl r1, r0.xyww, s3
					    mul r2, c5.xxyy, v0.xyxx
					    texldl r3, r2, s0
					    texldl r0, r0, s2
					    mul r4, r2, c5.z
					    texldl r4, r4, s4
					    mad r0.zw, r4.xyxy, -c5.w, -c5.x
					    texldl r2, r2, s1
					    mad r1.z, c0.x, r2.x, c0.y
					    rcp r1.z, r1.z
					    mov r2.xy, c1
					    mul r2.zw, r2.xyxy, c2.x
					    mad r0.zw, r0, r2, r1.xyxy
					    mul r1.xy, r2, c3.x
					    mul r1.xy, r1, c6.x
					    max r2.xy, r0_abs.zwzw, r1
					    cmp r1.xy, -r0.zwzw, c5.y, c5.x
					    cmp r0.zw, r0, -c5.y, -c5.x
					    add r0.zw, r0, r1.xyxy
					    mul r0.zw, r0, r2.xyxy
					    rcp r1.x, c4.x
					    dp2add r0.x, r0, r0, c5.y
					    rsq r0.x, r0.x
					    rcp r0.y, r0.x
					    mul r1.y, r0.y, c6.y
					    rcp r1.y, r1.y
					    mov r2.w, c5.y
					    mov r4, r3
					    mov r1.w, c5.x
					    mov r5.x, c5.y
					    rep i0
					      add r6, r5.x, c7
					      add r7, r5.x, c8
					      add r8, r5.x, c9
					      cmp r5.yz, -r6_abs.x, c11.xxyw, c11.z
					      cmp r5.yz, -r6_abs.y, c12.xxyw, r5
					      cmp r5.yz, -r6_abs.z, c12.xzww, r5
					      cmp r5.yz, -r6_abs.w, c13.xxyw, r5
					      cmp r5.yz, -r7_abs.x, c13.xzww, r5
					      cmp r5.yz, -r7_abs.y, c14.xxyw, r5
					      cmp r5.yz, -r7_abs.z, c14.xzww, r5
					      cmp r5.yz, -r7_abs.w, c15.xxyw, r5
					      cmp r5.yz, -r8_abs.x, c15.xzww, r5
					      cmp r5.yz, -r8_abs.y, c16.xxyw, r5
					      cmp r5.yz, -r8_abs.z, c16.xzww, r5
					      cmp r5.yz, -r8_abs.w, c10.xxyw, r5
					      mul r6.xy, r0.zwzw, r5.yzzw
					      mad r2.xy, r0.zwzw, r5.yzzw, v0
					      add r5.y, -r2.y, c5.x
					      cmp r2.z, c1.y, r2.y, r5.y
					      texldl r7, r2.xzww, s2
					      texldl r8, r2.xyww, s1
					      mad r2.z, c0.x, r8.x, c0.y
					      rcp r2.z, r2.z
					      add r5.y, -r1.z, r2.z
					      mad_sat r5.y, r5.y, -r1.x, c5.x
					      add r2.z, r1.z, -r2.z
					      mad_sat r2.z, r2.z, -r1.x, c5.x
					      add r5.zw, -r2.xyxy, v0.xyxy
					      dp2add r5.z, r5.zwzw, r5.zwzw, c5.y
					      rsq r5.z, r5.z
					      rcp r5.z, r5.z
					      mad r5.w, r5.z, -r0.x, c5.x
					      mul r2.z, r2.z, r5.w
					      cmp r2.z, r5.w, r2.z, c5.y
					      dp2add r5.w, r6, r6, c5.y
					      rsq r5.w, r5.w
					      rcp r5.w, r5.w
					      dp2add r6.x, r7, r7, c5.y
					      rsq r6.x, r6.x
					      mad r6.y, r5.w, -r6.x, c5.x
					      mul r5.y, r5.y, r6.y
					      cmp r5.y, r6.y, r5.y, c5.y
					      add r2.z, r2.z, r5.y
					      rcp r5.y, r6.x
					      mul r6.x, r5.y, c6.y
					      mad r5.y, r5.y, -c6.w, r5.w
					      rcp r5.w, r6.x
					      mul_sat r5.y, r5.w, r5.y
					      mad r5.w, r5.y, c10.z, c10.w
					      mul r5.y, r5.y, r5.y
					      mad r5.y, r5.w, -r5.y, c5.x
					      mad r5.z, r0.y, -c6.w, r5.z
					      mul_sat r5.z, r1.y, r5.z
					      mad r5.w, r5.z, c10.z, c10.w
					      mul r5.z, r5.z, r5.z
					      mad r5.z, r5.w, -r5.z, c5.x
					      dp2add r2.z, r5.y, r5.z, r2.z
					      texldl r6, r2.xyww, s0
					      mad r4, r6, r2.z, r4
					      add r1.w, r1.w, r2.z
					      add r5.x, r5.x, c5.x
					    endrep
					    rcp r0.x, r1.w
					    mul oC0, r0.x, r4
					
					// approximately 114 instruction slots used (16 texture, 98 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					vec2 ImmCB_0_0_0[12];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[14];
						float _Jitter;
						float _MaxVelocity;
						vec4 unused_0_5[2];
						float _SoftZDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _NeighbourMaxTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _VelTex;
					uniform  sampler2D _NoiseTex;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					ivec4 u_xlati2;
					vec4 u_xlat10_3;
					vec4 u_xlat4;
					vec4 u_xlat16_4;
					vec4 u_xlat10_4;
					vec4 u_xlat5;
					vec4 u_xlat10_5;
					ivec4 u_xlati5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat10_7;
					vec4 u_xlat8;
					vec4 u_xlat10_8;
					vec4 u_xlat10_9;
					vec2 u_xlat10;
					int u_xlati14;
					float u_xlat15;
					vec2 u_xlat16;
					float u_xlat16_20;
					vec2 u_xlat24;
					bool u_xlatb24;
					float u_xlat27;
					float u_xlat16_30;
					float u_xlat34;
					float u_xlat36;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(-0.326211989, -0.405809999);
						ImmCB_0_0_0[1] = vec2(-0.840143979, -0.0735799968);
						ImmCB_0_0_0[2] = vec2(-0.69591397, 0.457136989);
						ImmCB_0_0_0[3] = vec2(-0.203345001, 0.620715976);
						ImmCB_0_0_0[4] = vec2(0.962339997, -0.194983006);
						ImmCB_0_0_0[5] = vec2(0.473434001, -0.480026007);
						ImmCB_0_0_0[6] = vec2(0.519456029, 0.767022014);
						ImmCB_0_0_0[7] = vec2(0.185461, -0.893123984);
						ImmCB_0_0_0[8] = vec2(0.507430971, 0.0644249991);
						ImmCB_0_0_0[9] = vec2(0.896420002, 0.412458003);
						ImmCB_0_0_0[10] = vec2(-0.321940005, -0.932614982);
						ImmCB_0_0_0[11] = vec2(-0.791558981, -0.597710013);
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat10.x = (-vs_TEXCOORD0.y) + 1.0;
					    u_xlat1.y = (u_xlatb0) ? u_xlat10.x : vs_TEXCOORD0.y;
					    u_xlat1.x = vs_TEXCOORD0.x;
					    u_xlat10_2 = textureLod(_NeighbourMaxTex, u_xlat1.xy, 0.0);
					    u_xlat10_3 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = textureLod(_VelTex, u_xlat1.xy, 0.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * vec2(11.0, 11.0);
					    u_xlat10_4 = textureLod(_NoiseTex, u_xlat10.xy, 0.0);
					    u_xlat16_4 = u_xlat10_4.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat10_5 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10.x = _ZBufferParams.x * u_xlat10_5.x + _ZBufferParams.y;
					    u_xlat10.x = float(1.0) / u_xlat10.x;
					    u_xlat5 = _MainTex_TexelSize.xyxy * vec4(_Jitter, _Jitter, _MaxVelocity, _MaxVelocity);
					    u_xlat2 = u_xlat16_4 * u_xlat5.xyxy + u_xlat10_2.xyxy;
					    u_xlat4 = u_xlat5.zwzw * vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = max(abs(u_xlat2.zwzw), u_xlat4);
					    u_xlati5 = ivec4(uvec4(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.zwzw)) * 0xFFFFFFFFu);
					    u_xlati2 = ivec4(uvec4(lessThan(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0))) * 0xFFFFFFFFu);
					    u_xlati2 = (-u_xlati5) + u_xlati2;
					    u_xlat2 = vec4(u_xlati2);
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat16_20 = dot(u_xlat10_1.xy, u_xlat10_1.xy);
					    u_xlat16_20 = sqrt(u_xlat16_20);
					    u_xlat16_30 = u_xlat16_20 * 0.0999999642;
					    u_xlat16_30 = float(1.0) / u_xlat16_30;
					    u_xlat1 = u_xlat10_3;
					    u_xlat4.x = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<12 ; u_xlati_loop_1++)
					    {
					        u_xlat5 = u_xlat2 * ImmCB_0_0_0[u_xlati_loop_1].xyxy;
					        u_xlat6 = u_xlat5 * vec4(1.0, 1.0, -1.0, -1.0);
					        u_xlat5 = u_xlat5 * vec4(1.0, 1.0, -1.0, -1.0) + vs_TEXCOORD0.xyxy;
					        u_xlat24.xy = (-u_xlat5.yw) + vec2(1.0, 1.0);
					        u_xlat7.xy = (bool(u_xlatb0)) ? u_xlat24.xy : u_xlat5.yw;
					        u_xlat7.zw = u_xlat5.xz;
					        u_xlat10_8 = textureLod(_VelTex, u_xlat7.zx, 0.0);
					        u_xlat10_9 = textureLod(_CameraDepthTexture, u_xlat5.xy, 0.0);
					        u_xlat24.x = _ZBufferParams.x * u_xlat10_9.x + _ZBufferParams.y;
					        u_xlat24.x = float(1.0) / u_xlat24.x;
					        u_xlat34 = (-u_xlat10.x) + u_xlat24.x;
					        u_xlat24.y = u_xlat34 / _SoftZDistance;
					        u_xlat24.x = u_xlat10.x + (-u_xlat24.x);
					        u_xlat24.x = u_xlat24.x / _SoftZDistance;
					        u_xlat24.xy = (-u_xlat24.xy) + vec2(1.0, 1.0);
					        u_xlat24.xy = clamp(u_xlat24.xy, 0.0, 1.0);
					        u_xlat7.xz = (-u_xlat5.xy) + vs_TEXCOORD0.xy;
					        u_xlat7.x = dot(u_xlat7.xz, u_xlat7.xz);
					        u_xlat7.x = sqrt(u_xlat7.x);
					        u_xlat27 = u_xlat7.x / u_xlat16_20;
					        u_xlat27 = (-u_xlat27) + 1.0;
					        u_xlat27 = max(u_xlat27, 0.0);
					        u_xlat6.x = dot(u_xlat6.xy, u_xlat6.xy);
					        u_xlat6.y = dot(u_xlat10_8.xy, u_xlat10_8.xy);
					        u_xlat6.xy = sqrt(u_xlat6.xy);
					        u_xlat8.x = u_xlat6.x / u_xlat6.y;
					        u_xlat8.x = (-u_xlat8.x) + 1.0;
					        u_xlat8.x = max(u_xlat8.x, 0.0);
					        u_xlat34 = u_xlat24.y * u_xlat8.x;
					        u_xlat24.x = u_xlat24.x * u_xlat27 + u_xlat34;
					        u_xlat34 = u_xlat6.y * 0.0999999642;
					        u_xlat6.x = (-u_xlat6.y) * 0.949999988 + u_xlat6.x;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat34 = u_xlat34 * u_xlat6.x;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat6.x = u_xlat34 * -2.0 + 3.0;
					        u_xlat34 = u_xlat34 * u_xlat34;
					        u_xlat34 = (-u_xlat6.x) * u_xlat34 + 1.0;
					        u_xlat6.x = (-u_xlat16_20) * 0.949999988 + u_xlat7.x;
					        u_xlat6.x = u_xlat16_30 * u_xlat6.x;
					        u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					        u_xlat16.x = u_xlat6.x * -2.0 + 3.0;
					        u_xlat6.x = u_xlat6.x * u_xlat6.x;
					        u_xlat6.x = (-u_xlat16.x) * u_xlat6.x + 1.0;
					        u_xlat34 = dot(vec2(u_xlat34), u_xlat6.xx);
					        u_xlat24.x = u_xlat34 + u_xlat24.x;
					        u_xlat10_8 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					        u_xlat8 = u_xlat10_8 * u_xlat24.xxxx + u_xlat1;
					        u_xlat24.x = u_xlat24.x + u_xlat4.x;
					        u_xlat10_7 = textureLod(_VelTex, u_xlat7.wy, 0.0);
					        u_xlat10_9 = textureLod(_CameraDepthTexture, u_xlat5.zw, 0.0);
					        u_xlat34 = _ZBufferParams.x * u_xlat10_9.x + _ZBufferParams.y;
					        u_xlat34 = float(1.0) / u_xlat34;
					        u_xlat5.x = (-u_xlat10.x) + u_xlat34;
					        u_xlat5.x = u_xlat5.x / _SoftZDistance;
					        u_xlat5.x = (-u_xlat5.x) + 1.0;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat34 = u_xlat10.x + (-u_xlat34);
					        u_xlat34 = u_xlat34 / _SoftZDistance;
					        u_xlat34 = (-u_xlat34) + 1.0;
					        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					        u_xlat6.xy = (-u_xlat5.zw) + vs_TEXCOORD0.xy;
					        u_xlat15 = dot(u_xlat6.xy, u_xlat6.xy);
					        u_xlat15 = sqrt(u_xlat15);
					        u_xlat6.x = u_xlat15 / u_xlat16_20;
					        u_xlat6.x = (-u_xlat6.x) + 1.0;
					        u_xlat16.x = dot(u_xlat6.zw, u_xlat6.zw);
					        u_xlat16.y = dot(u_xlat10_7.xy, u_xlat10_7.xy);
					        u_xlat16.xy = sqrt(u_xlat16.xy);
					        u_xlat36 = u_xlat16.x / u_xlat16.y;
					        u_xlat6.w = (-u_xlat36) + 1.0;
					        u_xlat6.xw = max(u_xlat6.xw, vec2(0.0, 0.0));
					        u_xlat5.x = u_xlat5.x * u_xlat6.w;
					        u_xlat34 = u_xlat34 * u_xlat6.x + u_xlat5.x;
					        u_xlat5.x = u_xlat16.y * 0.0999999642;
					        u_xlat6.x = (-u_xlat16.y) * 0.949999988 + u_xlat16.x;
					        u_xlat5.x = float(1.0) / u_xlat5.x;
					        u_xlat5.x = u_xlat5.x * u_xlat6.x;
					        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					        u_xlat6.x = u_xlat5.x * -2.0 + 3.0;
					        u_xlat5.x = u_xlat5.x * u_xlat5.x;
					        u_xlat5.x = (-u_xlat6.x) * u_xlat5.x + 1.0;
					        u_xlat15 = (-u_xlat16_20) * 0.949999988 + u_xlat15;
					        u_xlat15 = u_xlat16_30 * u_xlat15;
					        u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					        u_xlat6.x = u_xlat15 * -2.0 + 3.0;
					        u_xlat15 = u_xlat15 * u_xlat15;
					        u_xlat15 = (-u_xlat6.x) * u_xlat15 + 1.0;
					        u_xlat5.x = dot(u_xlat5.xx, vec2(u_xlat15));
					        u_xlat34 = u_xlat34 + u_xlat5.x;
					        u_xlat10_5 = textureLod(_MainTex, u_xlat5.zw, 0.0);
					        u_xlat1 = u_xlat10_5 * vec4(u_xlat34) + u_xlat8;
					        u_xlat4.x = u_xlat34 + u_xlat24.x;
					    }
					    SV_Target0 = u_xlat1 / u_xlat4.xxxx;
					    return;
					}"
				}
			}
		}
	}
}
Shader "Projector/Light" {
	Properties {
		_Color ("Main Color", Vector) = (1,1,1,1)
		_ShadowTex ("Cookie", 2D) = "" {}
		_FalloffTex ("FallOff", 2D) = "" {}
	}
	SubShader {
		Tags { "QUEUE" = "Transparent" }
		Pass {
			Tags { "QUEUE" = "Transparent" }
			Blend DstColor One, DstColor One
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Offset -1, -1
			GpuProgramID 57871
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_Projector;
					//   row_major float4x4 unity_ProjectorClip;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_Projector     c8       4
					//   unity_ProjectorClip c12      4
					//
					
					    vs_3_0
					    def c16, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord o0
					    dcl_texcoord1 o1
					    dcl_position o2
					    mad r0, v0.xyzx, c16.xxxy, c16.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    dp4 o0.x, c8, v0
					    dp4 o0.y, c9, v0
					    dp4 o0.z, c10, v0
					    dp4 o0.w, c11, v0
					    dp4 o1.x, c12, v0
					    dp4 o1.y, c13, v0
					    dp4 o1.z, c14, v0
					    dp4 o1.w, c15, v0
					    mad o2.xy, r2.w, c255, r2
					    mov o2.zw, r2
					
					// approximately 19 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_Projector;
						mat4x4 unity_ProjectorClip;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_Projector[1];
					    u_xlat0 = unity_Projector[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_Projector[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD0 = unity_Projector[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = in_POSITION0.yyyy * unity_ProjectorClip[1];
					    u_xlat0 = unity_ProjectorClip[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ProjectorClip[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = unity_ProjectorClip[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_Projector;
					//   row_major float4x4 unity_ProjectorClip;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   unity_Projector     c8       4
					//   unity_ProjectorClip c12      4
					//   unity_FogParams     c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord o0
					    dcl_texcoord1 o1
					    dcl_texcoord2 o2.x
					    dcl_position o3
					    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.w, c7, r1
					    dp4 r0.x, c6, r1
					    dp4 o0.x, c8, v0
					    dp4 o0.y, c9, v0
					    dp4 o0.z, c10, v0
					    dp4 o0.w, c11, v0
					    dp4 o1.x, c12, v0
					    dp4 o1.y, c13, v0
					    dp4 o1.z, c14, v0
					    dp4 o1.w, c15, v0
					    mad o2.x, r0.x, c16.z, c16.w
					    mov r2.z, r0.x
					    mad o3.xy, r2.w, c255, r2
					    mov o3.zw, r2
					
					// approximately 21 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_Projector;
						mat4x4 unity_ProjectorClip;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_4_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_Projector[1];
					    u_xlat0 = unity_Projector[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_Projector[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD0 = unity_Projector[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = in_POSITION0.yyyy * unity_ProjectorClip[1];
					    u_xlat0 = unity_ProjectorClip[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ProjectorClip[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = unity_ProjectorClip[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = u_xlat0.z / _ProjectionParams.y;
					    gl_Position = u_xlat0;
					    u_xlat0.x = (-u_xlat1.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * _ProjectionParams.z;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    vs_TEXCOORD2 = u_xlat0.x * unity_FogParams.z + unity_FogParams.w;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler2D _FalloffTex;
					//   sampler2D _ShadowTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Color       c0       1
					//   _ShadowTex   s0       1
					//   _FalloffTex  s1       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_2d s0
					    dcl_2d s1
					    texldp_pp r0, v1, s1
					    texldp_pp r1, v0, s0
					    mul_pp r2.xyz, r1, c0
					    add_pp r2.w, -r1.w, c1.x
					    mul_pp oC0, r0.w, r2
					
					// approximately 5 instruction slots used (2 texture, 3 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec4 _Color;
					};
					uniform  sampler2D _ShadowTex;
					uniform  sampler2D _FalloffTex;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
					    u_xlat10_0 = texture(_FalloffTex, u_xlat0.xy);
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat10_1 = texture(_ShadowTex, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat2.w = (-u_xlat10_1.w) + 1.0;
					    SV_Target0 = u_xlat10_0.wwww * u_xlat2;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler2D _FalloffTex;
					//   sampler2D _ShadowTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Color       c0       1
					//   _ShadowTex   s0       1
					//   _FalloffTex  s1       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    dcl_2d s1
					    texldp_pp r0, v1, s1
					    texldp_pp r1, v0, s0
					    mul_pp r2.xyz, r1, c0
					    add_pp r2.w, -r1.w, c1.x
					    mul_pp r0, r0.w, r2
					    mov_sat r1.x, v2.x
					    mul_pp oC0.xyz, r0, r1.x
					    mov_pp oC0.w, r0.w
					
					// approximately 8 instruction slots used (2 texture, 6 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec4 _Color;
					};
					uniform  sampler2D _ShadowTex;
					uniform  sampler2D _FalloffTex;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					float u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
					    u_xlat10_0 = texture(_FalloffTex, u_xlat0.xy);
					    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
					    u_xlat10_1 = texture(_ShadowTex, u_xlat0.xy);
					    u_xlat2.xyz = u_xlat10_1.xyz * _Color.xyz;
					    u_xlat2.w = (-u_xlat10_1.w) + 1.0;
					    u_xlat0 = u_xlat10_0.wwww * u_xlat2;
					    u_xlat1 = vs_TEXCOORD2;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat1);
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
			}
		}
	}
}
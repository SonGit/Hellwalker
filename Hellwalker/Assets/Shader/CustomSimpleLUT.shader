Shader "Custom/SimpleLUT" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "" {}
		_Amount ("Amount of Color Filter (0 - 1)", Float) = 1
		_Tint ("Tint (RGB)", Vector) = (1,1,1,1)
		_Hue ("Hue (0 - 360)", Float) = 0
		_Saturation ("Saturation (0 - 2)", Float) = 1
		_Brightness ("Brightness (0 - 3)", Float) = 1
		_Contrast ("Contrast (0 - 2)", Float) = 1
		_Sharpness ("Sharpness (-4 - 4)", Float) = 0
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 62062
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Amount;
					//   float _Brightness;
					//   sampler3D _ClutTex;
					//   float _Contrast;
					//   float _Hue;
					//   float2 _ImageHeightFactor;
					//   float2 _ImageWidthFactor;
					//   sampler2D _MainTex;
					//   float _Offset;
					//   float _Saturation;
					//   float _Scale;
					//   float _SharpnessCenterMultiplier;
					//   float _SharpnessEdgeMultiplier;
					//   float4 _TintColor;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _Amount                    c0       1
					//   _TintColor                 c1       1
					//   _Hue                       c2       1
					//   _Saturation                c3       1
					//   _Brightness                c4       1
					//   _Contrast                  c5       1
					//   _Scale                     c6       1
					//   _Offset                    c7       1
					//   _ImageWidthFactor          c8       1
					//   _ImageHeightFactor         c9       1
					//   _SharpnessCenterMultiplier c10      1
					//   _SharpnessEdgeMultiplier   c11      1
					//   _MainTex                   s0       1
					//   _ClutTex                   s1       1
					//
					
					    ps_3_0
					    def c12, 0.00277777785, 0.5, 6.28318548, -3.14159274
					    def c13, 0.57735002, 1, 0, 0
					    def c14, 0.298999995, 0.587000012, 0.114, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_volume s1
					    add r0.xy, c8, v0
					    texld r0, r0, s0
					    mul r0.xyz, r0, c11.x
					    add r1.xy, -c8, v0
					    texld r1, r1, s0
					    mad r0.xyz, r1, c11.x, r0
					    add r1.xy, c9, v0
					    texld r1, r1, s0
					    mad r0.xyz, r1, c11.x, r0
					    add r1.xy, -c9, v0
					    texld r1, r1, s0
					    mad r0.xyz, r1, c11.x, r0
					    texld r1, v0, s0
					    mad r0.xyz, r1, c10.x, -r0
					    mov oC0.w, r1.w
					    mul r1.xyz, r0.zxyw, c13.x
					    mad r1.xyz, r0.zxyw, c13.x, -r1.zxyw
					    mov r2.xy, c12
					    mad r0.w, c2.x, r2.x, r2.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c12.z, c12.w
					    sincos r3.xy, r0.w
					    mul r1.xyz, r1, r3.y
					    mad r1.xyz, r0, r3.x, r1
					    dp3 r0.x, c13.x, r0
					    mul r0.x, r0.x, c13.x
					    add r0.y, -r3.x, c13.y
					    mad r0.xyz, r0.x, r0.y, r1
					    add r0.xyz, r0, -c12.y
					    mad r0.xyz, r0, c5.x, r2.y
					    mul r1.xyz, r0, c4.x
					    dp3 r0.w, r1, c14
					    mad r0.xyz, r0, c4.x, -r0.w
					    mad r0.xyz, c3.x, r0, r0.w
					    mov r1.x, c6.x
					    mad r1.xyz, r0, r1.x, c7.x
					    texld r1, r1, s1
					    lrp r2.xyz, c0.x, r1, r0
					    mul oC0.xyz, r2, c1
					
					// approximately 46 instruction slots used (6 texture, 40 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Amount;
						vec4 _TintColor;
						float _Hue;
						float _Saturation;
						float _Brightness;
						float _Contrast;
						float _Scale;
						float _Offset;
						vec2 _ImageWidthFactor;
						vec2 _ImageHeightFactor;
						float _SharpnessCenterMultiplier;
						float _SharpnessEdgeMultiplier;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _ClutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(_ImageWidthFactor.x, _ImageWidthFactor.y);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat10_0.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier));
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-vec2(_ImageWidthFactor.x, _ImageWidthFactor.y));
					    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier)) + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + _ImageHeightFactor.xy;
					    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier)) + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ImageHeightFactor.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier)) + u_xlat0.xyz;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessCenterMultiplier, _SharpnessCenterMultiplier, _SharpnessCenterMultiplier)) + (-u_xlat0.xyz);
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat1.xyz = u_xlat0.zxy * vec3(0.57735002, 0.57735002, 0.57735002);
					    u_xlat1.xyz = u_xlat0.zxy * vec3(0.57735002, 0.57735002, 0.57735002) + (-u_xlat1.zxy);
					    u_xlat12 = _Hue * 0.0174532924;
					    u_xlat2 = sin(u_xlat12);
					    u_xlat3 = cos(u_xlat12);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat3) + u_xlat1.xyz;
					    u_xlat0.x = dot(vec3(0.57735002, 0.57735002, 0.57735002), u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * 0.57735002;
					    u_xlat4 = (-u_xlat3) + 1.0;
					    u_xlat0.xyz = u_xlat0.xxx * vec3(u_xlat4) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_Contrast, _Contrast, _Contrast)) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(vec3(_Brightness, _Brightness, _Brightness));
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_Brightness, _Brightness, _Brightness)) + (-vec3(u_xlat12));
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(_Scale) + vec3(vec3(_Offset, _Offset, _Offset));
					    u_xlat10_1 = texture(_ClutTex, u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat10_1.xyz;
					    u_xlat0.xyz = vec3(_Amount) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * _TintColor.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 113992
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Amount;
					//   float _Brightness;
					//   sampler3D _ClutTex;
					//   float _Contrast;
					//   float _Hue;
					//   float2 _ImageHeightFactor;
					//   float2 _ImageWidthFactor;
					//   sampler2D _MainTex;
					//   float _Offset;
					//   float _Saturation;
					//   float _Scale;
					//   float _SharpnessCenterMultiplier;
					//   float _SharpnessEdgeMultiplier;
					//   float4 _TintColor;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _Amount                    c0       1
					//   _TintColor                 c1       1
					//   _Hue                       c2       1
					//   _Saturation                c3       1
					//   _Brightness                c4       1
					//   _Contrast                  c5       1
					//   _Scale                     c6       1
					//   _Offset                    c7       1
					//   _ImageWidthFactor          c8       1
					//   _ImageHeightFactor         c9       1
					//   _SharpnessCenterMultiplier c10      1
					//   _SharpnessEdgeMultiplier   c11      1
					//   _MainTex                   s0       1
					//   _ClutTex                   s1       1
					//
					
					    ps_3_0
					    def c12, 0.00277777785, 0.5, 6.28318548, -3.14159274
					    def c13, 0.57735002, 1, 0, 0
					    def c14, 0.298999995, 0.587000012, 0.114, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_volume s1
					    add r0.xy, c8, v0
					    texld r0, r0, s0
					    mul r0.xyz, r0, c11.x
					    add r1.xy, -c8, v0
					    texld r1, r1, s0
					    mad r0.xyz, r1, c11.x, r0
					    add r1.xy, c9, v0
					    texld r1, r1, s0
					    mad r0.xyz, r1, c11.x, r0
					    add r1.xy, -c9, v0
					    texld r1, r1, s0
					    mad r0.xyz, r1, c11.x, r0
					    texld r1, v0, s0
					    mad r0.xyz, r1, c10.x, -r0
					    mov oC0.w, r1.w
					    rsq r0.x, r0.x
					    rcp r1.x, r0.x
					    rsq r0.x, r0.y
					    rsq r0.y, r0.z
					    rcp r1.z, r0.y
					    rcp r1.y, r0.x
					    mul r0.xyz, r1.zxyw, c13.x
					    mad r0.xyz, r1.zxyw, c13.x, -r0.zxyw
					    mov r2.xy, c12
					    mad r0.w, c2.x, r2.x, r2.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c12.z, c12.w
					    sincos r3.xy, r0.w
					    mul r0.xyz, r0, r3.y
					    mad r0.xyz, r1, r3.x, r0
					    dp3 r0.w, c13.x, r1
					    mul r0.w, r0.w, c13.x
					    add r1.x, -r3.x, c13.y
					    mad r0.xyz, r0.w, r1.x, r0
					    add r0.xyz, r0, -c12.y
					    mad r0.xyz, r0, c5.x, r2.y
					    mul r1.xyz, r0, c4.x
					    dp3 r0.w, r1, c14
					    mad r0.xyz, r0, c4.x, -r0.w
					    mad r0.xyz, c3.x, r0, r0.w
					    mov r1.x, c6.x
					    mad r1.xyz, r0, r1.x, c7.x
					    texld r1, r1, s1
					    lrp r2.xyz, c0.x, r1, r0
					    mul r0.xyz, r2, c1
					    mul oC0.xyz, r0, r0
					
					// approximately 53 instruction slots used (6 texture, 47 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Amount;
						vec4 _TintColor;
						float _Hue;
						float _Saturation;
						float _Brightness;
						float _Contrast;
						float _Scale;
						float _Offset;
						vec2 _ImageWidthFactor;
						vec2 _ImageHeightFactor;
						float _SharpnessCenterMultiplier;
						float _SharpnessEdgeMultiplier;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler3D _ClutTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					float u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(_ImageWidthFactor.x, _ImageWidthFactor.y);
					    u_xlat10_0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat10_0.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier));
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-vec2(_ImageWidthFactor.x, _ImageWidthFactor.y));
					    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier)) + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + _ImageHeightFactor.xy;
					    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier)) + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ImageHeightFactor.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier, _SharpnessEdgeMultiplier)) + u_xlat0.xyz;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat10_1.xyz * vec3(vec3(_SharpnessCenterMultiplier, _SharpnessCenterMultiplier, _SharpnessCenterMultiplier)) + (-u_xlat0.xyz);
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat0.xyz = sqrt(u_xlat0.xyz);
					    u_xlat1.xyz = u_xlat0.zxy * vec3(0.57735002, 0.57735002, 0.57735002);
					    u_xlat1.xyz = u_xlat0.zxy * vec3(0.57735002, 0.57735002, 0.57735002) + (-u_xlat1.zxy);
					    u_xlat12 = _Hue * 0.0174532924;
					    u_xlat2 = sin(u_xlat12);
					    u_xlat3 = cos(u_xlat12);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat3) + u_xlat1.xyz;
					    u_xlat0.x = dot(vec3(0.57735002, 0.57735002, 0.57735002), u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * 0.57735002;
					    u_xlat4 = (-u_xlat3) + 1.0;
					    u_xlat0.xyz = u_xlat0.xxx * vec3(u_xlat4) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_Contrast, _Contrast, _Contrast)) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(vec3(_Brightness, _Brightness, _Brightness));
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.xyz = u_xlat0.xyz * vec3(vec3(_Brightness, _Brightness, _Brightness)) + (-vec3(u_xlat12));
					    u_xlat0.xyz = vec3(vec3(_Saturation, _Saturation, _Saturation)) * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(_Scale) + vec3(vec3(_Offset, _Offset, _Offset));
					    u_xlat10_1 = texture(_ClutTex, u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat10_1.xyz;
					    u_xlat0.xyz = vec3(_Amount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _TintColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    return;
					}"
				}
			}
		}
	}
}
Shader "Hidden/ProBuilder/VertexPicker" {
	Properties {
	}
	SubShader {
		Tags { "DisableBatching" = "true" "IGNOREPROJECTOR" = "true" "ProBuilderPicker" = "VertexPass" "RenderType" = "Transparent" }
		Pass {
			Name "VERTICES"
			Tags { "DisableBatching" = "true" "IGNOREPROJECTOR" = "true" "ProBuilderPicker" = "VertexPass" "RenderType" = "Transparent" }
			ZClip Off
			Cull Off
			Offset -1, -1
			GpuProgramID 18885
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_MatrixV;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   unity_ObjectToWorld       c0       4
					//   glstate_matrix_projection c4       4
					//   unity_MatrixV             c8       3
					//   _ScreenParams             c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0.949999988, 0.5
					    def c13, 3.5, 9.99999975e-005, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_color o2
					    mov r0.x, c12.x
					    add r0.x, r0.x, -c7.w
					    mad r1, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp4 r2.w, c3, r1
					    dp4 r1.x, c8, r2
					    dp4 r1.y, c9, r2
					    dp4 r1.z, c10, r2
					    mul r1.xyz, r1, c12.z
					    mov r1.w, c12.x
					    dp4 r0.y, c6, r1
					    mad r3.z, r0.x, -c13.y, r0.y
					    dp4 r0.x, c4, r1
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c7, r1
					    rcp r0.w, r0.z
					    mul r0.xy, r0.w, r0
					    mad r0.xy, r0, c12.w, c12.w
					    mul r1.xy, c13.x, v3
					    mad r0.xy, r0, c11, r1
					    rcp r1.x, c11.x
					    rcp r1.y, c11.y
					    mad r0.xy, r0, r1, -c12.w
					    mul r0.xy, r0.z, r0
					    mov r3.w, r0.z
					    add r3.xy, r0, r0
					    mov o1.xy, v2
					    mov o2, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 32 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[6];
						vec4 _ScreenParams;
						vec4 unused_0_2[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[5];
						mat4x4 glstate_matrix_projection;
						mat4x4 unity_MatrixV;
						vec4 unused_2_3[11];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1.xyz = u_xlat0.yyy * unity_MatrixV[1].xyz;
					    u_xlat1.xyz = unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.949999988, 0.949999988, 0.949999988);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_projection[1];
					    u_xlat1 = glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + glstate_matrix_projection[3];
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat1.xy = in_TEXCOORD1.xy * vec2(3.5, 3.5);
					    u_xlat0.xy = u_xlat0.xy * _ScreenParams.xy + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xy / _ScreenParams.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = u_xlat0.ww * u_xlat0.xy;
					    gl_Position.xy = u_xlat0.xy + u_xlat0.xy;
					    u_xlat0.x = (-glstate_matrix_projection[3].w) + 1.0;
					    gl_Position.z = (-u_xlat0.x) * 9.99999975e-05 + u_xlat0.z;
					    gl_Position.w = u_xlat0.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					    ps_3_0
					    dcl_color_pp v0
					    mov_pp oC0, v0
					
					// approximately 1 instruction slot used"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vs_COLOR0;
					    return;
					}"
				}
			}
		}
	}
}